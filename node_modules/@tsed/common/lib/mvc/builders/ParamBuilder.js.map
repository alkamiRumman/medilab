{"version":3,"sources":["mvc/builders/ParamBuilder.ts"],"names":[],"mappings":"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","file":"ParamBuilder.js","sourcesContent":["import {getValue, nameOf, Type} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport {of, Subject} from \"rxjs\";\nimport {catchError, map, switchMap} from \"rxjs/operators\";\nimport {ConverterService} from \"../../converters\";\nimport {ParseExpressionError} from \"../errors/ParseExpressionError\";\nimport {RequiredParamError} from \"../errors/RequiredParamError\";\nimport {UnknowFilterError} from \"../errors/UnknowFilterError\";\nimport {IFilter} from \"../interfaces\";\nimport {IHandlerContext, IParamContext} from \"../interfaces/IHandlerContext\";\nimport {ParamMetadata} from \"../models/ParamMetadata\";\nimport {ParamTypes} from \"../models/ParamTypes\";\nimport {ValidationService} from \"../services/ValidationService\";\n\nexport class ParamBuilder {\n  constructor(private param: ParamMetadata) {}\n\n  /**\n   *\n   * @param param\n   * @param injector\n   * @returns {(value: any) => any}\n   */\n  static getConverterPipe(param: ParamMetadata, injector: InjectorService) {\n    if (!param.useConverter) {\n      return;\n    }\n    const converterService = injector.get<ConverterService>(ConverterService)!;\n\n    return (value: any) => {\n      return converterService.deserialize(value, param.collectionType || param.type, param.type);\n    };\n  }\n\n  /**\n   *\n   * @param param\n   * @param injector\n   * @returns {(value: any) => any}\n   */\n  static getValidationPipe(param: ParamMetadata, injector: InjectorService) {\n    const {collectionType} = param;\n    const type = param.type || param.collectionType;\n\n    if (!param.useValidation || (param.useValidation && !type)) {\n      return;\n    }\n\n    const validationService = injector.get<ValidationService>(ValidationService)!;\n\n    return (value: any) => {\n      try {\n        validationService.validate(value, type, collectionType);\n      } catch (err) {\n        throw new ParseExpressionError(nameOf(param.service), param.expression, err);\n      }\n\n      return value;\n    };\n  }\n\n  static getParseExpressionPipe(param: ParamMetadata) {\n    const {service} = param;\n    let {expression} = param;\n\n    if (typeof service !== \"string\" || !expression) {\n      return;\n    }\n\n    if (service === ParamTypes.HEADER) {\n      expression = (param.expression || \"\").toLowerCase();\n    }\n\n    return (value: any) => getValue(expression, value);\n  }\n\n  /**\n   *\n   * @param {ParamMetadata} param\n   * @returns {(value: any) => any}\n   */\n  static getRequiredPipe(param: ParamMetadata) {\n    if (!param.required) {\n      return;\n    }\n\n    return (value: any) => {\n      if (param.isRequired(value)) {\n        throw new RequiredParamError(nameOf(param.service), param.expression);\n      }\n\n      return value;\n    };\n  }\n\n  static getInitialPipe(param: ParamMetadata, injector: InjectorService): (context: IParamContext) => any {\n    const requestPipe: (context: IParamContext) => any = context => context.request;\n    const contextPipe: (context: IParamContext) => any = context => requestPipe(context).ctx;\n\n    switch (param.service) {\n      case ParamTypes.BODY:\n        return context => requestPipe(context).body;\n\n      case ParamTypes.QUERY:\n        return context => requestPipe(context).query;\n\n      case ParamTypes.PATH:\n        return context => requestPipe(context).params;\n\n      case ParamTypes.HEADER:\n        return context => requestPipe(context).headers;\n\n      case ParamTypes.COOKIES:\n        return context => requestPipe(context).cookies;\n\n      case ParamTypes.SESSION:\n        return context => requestPipe(context).session;\n\n      case ParamTypes.LOCALS:\n        return context => requestPipe(context).locals;\n\n      case ParamTypes.RESPONSE:\n        return context => context.response;\n\n      case ParamTypes.REQUEST:\n        return requestPipe;\n\n      case ParamTypes.NEXT_FN:\n        return context => context.next;\n\n      case ParamTypes.ERR:\n        return context => context.err;\n\n      case ParamTypes.CONTEXT:\n        return contextPipe;\n\n      case ParamTypes.ENDPOINT_INFO:\n        return context => contextPipe(context).endpoint;\n\n      case ParamTypes.RESPONSE_DATA:\n        return context => contextPipe(context).data;\n\n      default:\n        return this.getInvokableFilter(param, injector);\n    }\n  }\n\n  static getInvokableFilter(param: ParamMetadata, injector: InjectorService): any {\n    const target = param.service as Type<any>;\n    const {expression} = param;\n\n    return (context: IParamContext) => {\n      const instance = injector.get<IFilter>(target);\n\n      if (!instance || !instance.transform) {\n        throw new UnknowFilterError(target);\n      }\n\n      return instance.transform(expression, context.request, context.response);\n    };\n  }\n\n  private static getOperatorsPipe(param: ParamMetadata, injector: InjectorService) {\n    const operators = [\n      this.getInitialPipe(param, injector),\n      this.getParseExpressionPipe(param),\n      this.getRequiredPipe(param),\n      this.getValidationPipe(param, injector),\n      this.getConverterPipe(param, injector)\n    ]\n      .filter(Boolean)\n      .map(o => map(o!));\n\n    return (value: any) =>\n      of(value)\n        // @ts-ignore\n        .pipe(...operators)\n        .pipe(catchError(e => of(e)));\n  }\n\n  private static getContextPipe(param: ParamMetadata) {\n    return (context: IHandlerContext) => ({\n      ...context,\n      param,\n      expression: param.expression\n    });\n  }\n\n  public build(injector: InjectorService) {\n    const {param} = this;\n    const subject = new Subject<IHandlerContext>();\n    const observable = subject.pipe(\n      map(ParamBuilder.getContextPipe(param)),\n      switchMap(ParamBuilder.getOperatorsPipe(param, injector))\n    );\n\n    return {subject, observable};\n  }\n}\n"],"sourceRoot":"../../../src"}