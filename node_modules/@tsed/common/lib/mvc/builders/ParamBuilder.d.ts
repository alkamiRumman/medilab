import { InjectorService } from "@tsed/di";
import { Subject } from "rxjs";
import { IHandlerContext, IParamContext } from "../interfaces/IHandlerContext";
import { ParamMetadata } from "../models/ParamMetadata";
export declare class ParamBuilder {
    private param;
    constructor(param: ParamMetadata);
    /**
     *
     * @param param
     * @param injector
     * @returns {(value: any) => any}
     */
    static getConverterPipe(param: ParamMetadata, injector: InjectorService): ((value: any) => any) | undefined;
    /**
     *
     * @param param
     * @param injector
     * @returns {(value: any) => any}
     */
    static getValidationPipe(param: ParamMetadata, injector: InjectorService): ((value: any) => any) | undefined;
    static getParseExpressionPipe(param: ParamMetadata): ((value: any) => any) | undefined;
    /**
     *
     * @param {ParamMetadata} param
     * @returns {(value: any) => any}
     */
    static getRequiredPipe(param: ParamMetadata): ((value: any) => any) | undefined;
    static getInitialPipe(param: ParamMetadata, injector: InjectorService): (context: IParamContext) => any;
    static getInvokableFilter(param: ParamMetadata, injector: InjectorService): any;
    private static getOperatorsPipe;
    private static getContextPipe;
    build(injector: InjectorService): {
        subject: Subject<IHandlerContext>;
        observable: import("rxjs").Observable<unknown>;
    };
}
