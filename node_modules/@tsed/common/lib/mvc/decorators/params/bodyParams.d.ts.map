{"version":3,"sources":["mvc/decorators/params/bodyParams.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,YAAY,CAAC;AAChC,OAAO,EAAC,aAAa,EAAC,MAAM,gCAAgC,CAAC;AAK7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACH,wBAAgB,UAAU,CAAC,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,kBAAkB,CAAC;AACvF,wBAAgB,UAAU,CAAC,UAAU,EAAE,MAAM,GAAG,kBAAkB,CAAC;AACnE,wBAAgB,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,kBAAkB,CAAC;AACnE,wBAAgB,UAAU,CAAC,OAAO,EAAE,aAAa,CAAC,GAAG,CAAC,GAAG,kBAAkB,CAAC;AAC5E,wBAAgB,UAAU,IAAI,kBAAkB,CAAC","file":"bodyParams.d.ts","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {IParamOptions} from \"../../interfaces/IParamOptions\";\nimport {ParamTypes} from \"../../models/ParamTypes\";\nimport {UseFilter} from \"./useFilter\";\nimport {mapParamsOptions} from \"./utils/mapParamsOptions\";\n\n/**\n * BodyParams return the value from [request.body](http://expressjs.com/en/4x/api.html#req.body) object.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Post('/')\n *    create(@BodyParams() body: any) {\n *       console.log('Entire body', body);\n *    }\n *\n *    @Post('/')\n *    create(@BodyParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n *\n *    @Post('/')\n *    create(@BodyParams('user') user: User) { // with deserialization\n *       console.log('user', user);\n *    }\n *\n *    @Post('/')\n *    create(@BodyParams('users', User) users: User[]) { // with deserialization\n *       console.log('users', users);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @param useType The type of the class that to be used to deserialize the data.\n * @decorator\n * @returns {Function}\n */\nexport function BodyParams(expression: string, useType: Type<any>): ParameterDecorator;\nexport function BodyParams(expression: string): ParameterDecorator;\nexport function BodyParams(useType: Type<any>): ParameterDecorator;\nexport function BodyParams(options: IParamOptions<any>): ParameterDecorator;\nexport function BodyParams(): ParameterDecorator;\nexport function BodyParams(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = true, useValidation = true} = mapParamsOptions(args);\n\n  return UseFilter(ParamTypes.BODY, {\n    expression,\n    useType,\n    useConverter,\n    useValidation\n  });\n}\n"],"sourceRoot":"../../../../src"}