{"version":3,"sources":["mvc/decorators/params/queryParams.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,IAAI,EAAC,MAAM,YAAY,CAAC;AAChC,OAAO,EAAC,aAAa,EAAC,MAAM,gCAAgC,CAAC;AAK7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACH,wBAAgB,WAAW,CAAC,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,kBAAkB,CAAC;AACxF,wBAAgB,WAAW,CAAC,UAAU,EAAE,MAAM,GAAG,kBAAkB,CAAC;AACpE,wBAAgB,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,kBAAkB,CAAC;AACpE,wBAAgB,WAAW,CAAC,OAAO,EAAE,aAAa,CAAC,GAAG,CAAC,GAAG,kBAAkB,CAAC;AAC7E,wBAAgB,WAAW,IAAI,kBAAkB,CAAC","file":"queryParams.d.ts","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {IParamOptions} from \"../../interfaces/IParamOptions\";\nimport {ParamTypes} from \"../../models/ParamTypes\";\nimport {UseFilter} from \"./useFilter\";\nimport {mapParamsOptions} from \"./utils/mapParamsOptions\";\n\n/**\n * QueryParams return the value from [request.query](http://expressjs.com/en/4x/api.html#req.query) object.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Get('/')\n *    get(@QueryParams() query: any) {\n *       console.log('Entire query', query);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('user') user: User) { // with deserialization\n *       console.log('user', user);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('users', User) users: User[]) { // with deserialization\n *       console.log('users', users);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @param useType The type of the class that to be used to deserialize the data.\n * @decorator\n * @returns {ParameterDecorator}\n */\nexport function QueryParams(expression: string, useType: Type<any>): ParameterDecorator;\nexport function QueryParams(expression: string): ParameterDecorator;\nexport function QueryParams(useType: Type<any>): ParameterDecorator;\nexport function QueryParams(options: IParamOptions<any>): ParameterDecorator;\nexport function QueryParams(): ParameterDecorator;\nexport function QueryParams(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = true, useValidation = true} = mapParamsOptions(args);\n\n  return UseFilter(ParamTypes.QUERY, {\n    expression,\n    useType,\n    useConverter,\n    useValidation\n  });\n}\n"],"sourceRoot":"../../../../src"}