{"version":3,"sources":["mvc/decorators/allow.ts"],"names":[],"mappings":";;AAAA,qCAA2F;AAE3F,0FAAqF;AACrF,qEAAgE;AAEhE;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,SAAgB,KAAK,CAAC,GAAG,qBAA4B;IACnD,MAAM,iBAAiB,GAAG,+CAAsB,CAAC,CAAC,MAAkB,EAAE,EAAE;QACtE,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;YAC3B,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;gBACtB,MAAM,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,EAAC,CAAC,CAAC;gBACnE,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;aAC3B;iBAAM;gBACL,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,MAAM,CAAQ,CAAC,CAAC;aAC9D;SACF;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,GAAG,aAAkC,EAAQ,EAAE;QACrD,MAAM,QAAQ,GAAG,yCAAmB,CAAC,aAAa,CAAC,CAAC;QAEpD,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,+BAAwB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;SAC1D;QAED,QAAQ,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QAEvD,IAAI,uBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,UAAU,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE;YACtG,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;SACvD;IACH,CAAC,CAAC;AACJ,CAAC;AAzBD,sBAyBC","file":"allow.js","sourcesContent":["import {DecoratorParameters, getDecoratorType, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonSchema} from \"../../jsonschema/class/JsonSchema\";\nimport {decoratorSchemaFactory} from \"../../jsonschema/utils/decoratorSchemaFactory\";\nimport {getStorableMetadata} from \"./utils/getStorableMetadata\";\n\n/**\n * Add allowed values when the property or parameters is required.\n *\n * #### Example on parameter:\n *\n * ```typescript\n * @Post(\"/\")\n * async method(@Required() @Allow(\"\") @BodyParams(\"field\") field: string) {}\n * ```\n * > Required will throw a BadRequest when the given value is `null` or `undefined` but not for an empty string.\n *\n * #### Example on model:\n *\n * ```typescript\n * class Model {\n *   @Property()\n *   @Required()\n *   @Allow(\"\")\n *   field: string;\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n */\nexport function Allow(...allowedRequiredValues: any[]): any {\n  const allowNullInSchema = decoratorSchemaFactory((schema: JsonSchema) => {\n    if (schema && schema.mapper) {\n      if (schema.mapper.$ref) {\n        schema.mapper.oneOf = [{type: \"null\"}, {$ref: schema.mapper.$ref}];\n        delete schema.mapper.$ref;\n      } else {\n        schema.mapper.type = [].concat(schema.type, [\"null\"] as any);\n      }\n    }\n  });\n\n  return (...decoratorArgs: DecoratorParameters): void => {\n    const metadata = getStorableMetadata(decoratorArgs);\n\n    if (!metadata) {\n      throw new UnsupportedDecoratorType(Allow, decoratorArgs);\n    }\n\n    metadata.allowedRequiredValues = allowedRequiredValues;\n\n    if (getDecoratorType(decoratorArgs, true) === \"property\" && allowedRequiredValues.some(e => e == null)) {\n      allowNullInSchema(decoratorArgs[0], decoratorArgs[1]);\n    }\n  };\n}\n"],"sourceRoot":"../../../src"}