{"version":3,"sources":["mvc/decorators/required.ts"],"names":[],"mappings":";;AAAA,mCAA8B;AAC9B,qCAAsG;AACtG,qEAAgE;AAEhE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,SAAgB,QAAQ,CAAC,GAAG,qBAA4B;IACtD,OAAO,sBAAe,CACpB,CAAC,GAAG,aAAkC,EAAE,EAAE;QACxC,MAAM,QAAQ,GAAG,yCAAmB,CAAC,aAAa,CAAC,CAAC;QAEpD,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,+BAAwB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;SAC7D;QAED,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;QAEzB,IAAI,qBAAqB,CAAC,MAAM,EAAE;YAChC,aAAK,CAAC,GAAG,qBAAqB,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC;SACnD;IACH,CAAC,EACD,iBAAU,CAAC,WAAW,EAAE;QACtB,KAAK,EAAE;YACL,WAAW,EAAE,YAAY;SAC1B;KACF,CAAC,CACH,CAAC;AACJ,CAAC;AArBD,4BAqBC","file":"required.js","sourcesContent":["import {Allow} from \"./allow\";\nimport {applyDecorators, DecoratorParameters, StoreMerge, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {getStorableMetadata} from \"./utils/getStorableMetadata\";\n\n/**\n * Add required annotation for a function argument.\n *\n * The @Required decorator can be used on two cases.\n *\n * To decorate a parameters:\n *\n * ```typescript\n * @Post(\"/\")\n * async method(@Required() @BodyParams(\"field\") field: string) {}\n * ```\n *\n * To decorate a model:\n *\n * ```typescript\n * class Model {\n *   @Property()\n *   @Required()\n *   field: string;\n * }\n * ```\n *\n * > Required will throw a BadRequest when the given value is `null`, an empty string or `undefined`.\n *\n * ### Allow a values\n *\n * In some case, you didn't want trigger a BadRequest when the value is an empty string for example.\n * The decorator `@Allow()`, allow you to configure a value list for which there will be no exception.\n *\n * ```typescript\n * class Model {\n *   @Property()\n *   @Required()\n *   @Allow(\"\")\n *   field: string;\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n * @converters\n */\nexport function Required(...allowedRequiredValues: any[]): any {\n  return applyDecorators(\n    (...decoratorArgs: DecoratorParameters) => {\n      const metadata = getStorableMetadata(decoratorArgs);\n\n      if (!metadata) {\n        throw new UnsupportedDecoratorType(Required, decoratorArgs);\n      }\n\n      metadata.required = true;\n\n      if (allowedRequiredValues.length) {\n        Allow(...allowedRequiredValues)(...decoratorArgs);\n      }\n    },\n    StoreMerge(\"responses\", {\n      \"400\": {\n        description: \"BadRequest\"\n      }\n    })\n  );\n}\n"],"sourceRoot":"../../../src"}