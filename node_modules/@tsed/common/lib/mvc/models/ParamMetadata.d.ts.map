{"version":3,"sources":["mvc/models/ParamMetadata.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,QAAQ,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AACtD,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AAExC,MAAM,WAAW,wBAAwB;IACvC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB,WAAW,EAAE,MAAM,GAAG,MAAM,CAAC;IAC7B,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;IAC1C,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,OAAO,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACpB,YAAY,CAAC,EAAE,OAAO,CAAC;IACvB,aAAa,CAAC,EAAE,OAAO,CAAC;IACxB,SAAS,CAAC,EAAE,MAAM,GAAG,UAAU,CAAC;CACjC;AAED,qBAAa,aAAc,SAAQ,QAAS,YAAW,wBAAwB;IAC7E;;OAEG;IAEI,UAAU,EAAE,MAAM,CAAC;IAC1B;;OAEG;IAEI,SAAS,EAAE,MAAM,GAAG,UAAU,CAAC;IACtC;;;OAGG;IAEI,aAAa,EAAE,OAAO,CAAS;IACtC;;;OAGG;IAEI,YAAY,EAAE,OAAO,CAAS;IAErC;;OAEG;IAEI,OAAO,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;gBAEpC,OAAO,EAAE,wBAAwB;CAW9C","file":"ParamMetadata.d.ts","sourcesContent":["import {Enumerable, Storable, Type} from \"@tsed/core\";\nimport {ParamTypes} from \"./ParamTypes\";\n\nexport interface IParamConstructorOptions {\n  target: Type<any>;\n  propertyKey: string | symbol;\n  index: number;\n  service?: string | Type<any> | ParamTypes;\n  required?: boolean;\n  expression?: string;\n  useType?: Type<any>;\n  useConverter?: boolean;\n  useValidation?: boolean;\n  paramType?: string | ParamTypes;\n}\n\nexport class ParamMetadata extends Storable implements IParamConstructorOptions {\n  /**\n   *\n   */\n  @Enumerable()\n  public expression: string;\n  /**\n   *\n   */\n  @Enumerable()\n  public paramType: string | ParamTypes;\n  /**\n   *\n   * @type {boolean}\n   */\n  @Enumerable()\n  public useValidation: boolean = false;\n  /**\n   *\n   * @type {boolean}\n   */\n  @Enumerable()\n  public useConverter: boolean = false;\n\n  /**\n   *\n   */\n  @Enumerable()\n  public service: string | Type<any> | ParamTypes;\n\n  constructor(options: IParamConstructorOptions) {\n    super(options.target, options.propertyKey, options.index);\n\n    const {expression, paramType, useValidation, useConverter, service} = options;\n\n    this.expression = expression || this.expression;\n    this.paramType = paramType || this.paramType;\n    this.useValidation = Boolean(useValidation);\n    this.useConverter = Boolean(useConverter);\n    this.service = service || this.service;\n  }\n}\n"],"sourceRoot":"../../../src"}