import { Type } from "@tsed/core";
import { HandlerType } from "../interfaces/HandlerType";
import { ParamMetadata } from "../models/ParamMetadata";
export interface IHandlerConstructorOptions {
    target: Type<any> | Function;
    token?: Type<any>;
    propertyKey?: string | symbol;
    type?: HandlerType;
}
export declare class HandlerMetadata {
    readonly target: any;
    readonly token: Type<any>;
    /**
     * @deprecated
     */
    readonly methodClassName: string;
    readonly propertyKey: string | symbol;
    /**
     * @deprecated
     */
    readonly method: string;
    readonly injectable: boolean;
    readonly type: HandlerType;
    readonly hasErrorParam: boolean;
    readonly hasNextFunction: boolean;
    handler: any;
    constructor(options: IHandlerConstructorOptions);
    /**
     * @deprecated
     */
    readonly services: ParamMetadata[];
    readonly parameters: ParamMetadata[];
    getParams(): ParamMetadata[];
    hasParamType(paramType: any): boolean;
}
