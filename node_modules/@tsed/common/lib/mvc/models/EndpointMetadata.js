"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const constants_1 = require("../constants");
const ParamRegistry_1 = require("../registries/ParamRegistry");
/**
 * EndpointMetadata contains metadata about a controller and his method.
 * Each annotation (@Get, @Body...) attached to a method are stored in a endpoint.
 * EndpointMetadata convert this metadata to an array which contain arguments to call an Express method.
 *
 * Example :
 *
 *    @Controller("/my-path")
 *    provide MyClass {
 *
 *        @Get("/")
 *        @Authenticated()
 *        public myMethod(){}
 *    }
 *
 */
class EndpointMetadata extends core_1.Storable {
    constructor(options) {
        super(options.target, options.propertyKey, Object.getOwnPropertyDescriptor(options.target, options.propertyKey));
        // LIFECYCLE
        this.beforeMiddlewares = [];
        this.middlewares = [];
        this.afterMiddlewares = [];
        /**
         * Route strategy.
         */
        this.pathsMethods = [];
        const { target, propertyKey, beforeMiddlewares = [], middlewares = [], afterMiddlewares = [], pathsMethods = [], type } = options;
        this._type = core_1.Metadata.getReturnType(target, propertyKey);
        this.beforeMiddlewares = beforeMiddlewares;
        this.middlewares = middlewares;
        this.afterMiddlewares = afterMiddlewares;
        this.pathsMethods = pathsMethods;
        this.type = type;
    }
    get type() {
        return core_1.isPromise(this._type) || core_1.isArrayOrArrayClass(this._type) || this._type === Object ? undefined : this._type;
    }
    set type(type) {
        this._type = type;
    }
    /**
     * @deprecated
     */
    get methodClassName() {
        return String(this.propertyKey);
    }
    /**
     *
     * @returns {Store}
     */
    get store() {
        return this.inheritedEndpoint ? this.inheritedEndpoint.store : this._store;
    }
    get statusCode() {
        return this.store.get("statusCode") || 200;
    }
    get params() {
        return ParamRegistry_1.ParamRegistry.getParams(this.target, this.propertyKey);
    }
    /**
     * Find the a value at the controller level. Let this value be extended or overridden by the endpoint itself.
     *
     * @param key
     * @returns {any}
     */
    get(key) {
        const ctrlValue = core_1.Store.from(this.target).get(key);
        let meta = core_1.deepExtends(undefined, ctrlValue);
        const endpointValue = this.store.get(key);
        if (endpointValue !== undefined) {
            meta = core_1.deepExtends(meta, endpointValue);
        }
        return meta;
    }
    /**
     * Change the type and the collection type from the status code.
     * @param {string | number} code
     */
    statusResponse(code) {
        const get = (code) => (this.get("responses") || {})[code] || {};
        let { description, headers, examples } = get(code);
        if (code) {
            const { type, collectionType } = get(code);
            this.type = type;
            this.collectionType = collectionType;
        }
        const expectedStatus = this.statusCode;
        if (+code === +expectedStatus) {
            const response = this.store.get("response");
            if (response) {
                headers = response.headers || headers;
                examples = response.examples || examples;
                description = response.description || description;
                this.type = response.type || this.type;
                this.collectionType = response.collectionType || this.collectionType;
            }
        }
        if (headers) {
            headers = core_1.deepExtends({}, headers);
            Object.keys(headers).forEach(key => {
                delete headers[key].value;
            });
        }
        return {
            headers,
            examples,
            description
        };
    }
    /**
     *
     * @param args
     * @returns {EndpointMetadata}
     */
    before(args) {
        this.beforeMiddlewares = this.beforeMiddlewares.concat(args);
        return this;
    }
    /**
     *
     * @param args
     * @returns {EndpointMetadata}
     */
    after(args) {
        this.afterMiddlewares = this.afterMiddlewares.concat(args);
        return this;
    }
    /**
     * Store all arguments collected via Annotation.
     * @param args
     */
    merge(args) {
        const expressMethods = {};
        const filteredArg = args.filter((arg) => {
            if (typeof arg === "string" && constants_1.EXPRESS_METHODS.indexOf(arg) > -1) {
                expressMethods.method = arg;
                return false;
            }
            if (typeof arg === "string" || arg instanceof RegExp) {
                expressMethods.path = arg;
                return false;
            }
            return !!arg;
        });
        if (expressMethods.method || expressMethods.path) {
            this.pathsMethods.push(expressMethods);
        }
        this.middlewares = this.middlewares.concat(filteredArg);
        return this;
    }
    /**
     *
     * @param {Type<any>} target
     */
    inherit(target) {
        const metadata = new EndpointMetadata(Object.assign({}, this, { target, type: this._type }));
        metadata.inheritedEndpoint = this;
        return metadata;
    }
}
tslib_1.__decorate([
    core_1.Enumerable(),
    tslib_1.__metadata("design:type", Array)
], EndpointMetadata.prototype, "beforeMiddlewares", void 0);
tslib_1.__decorate([
    core_1.Enumerable(),
    tslib_1.__metadata("design:type", Array)
], EndpointMetadata.prototype, "middlewares", void 0);
tslib_1.__decorate([
    core_1.Enumerable(),
    tslib_1.__metadata("design:type", Array)
], EndpointMetadata.prototype, "afterMiddlewares", void 0);
tslib_1.__decorate([
    core_1.Enumerable(),
    tslib_1.__metadata("design:type", Array)
], EndpointMetadata.prototype, "pathsMethods", void 0);
tslib_1.__decorate([
    core_1.NotEnumerable(),
    tslib_1.__metadata("design:type", EndpointMetadata)
], EndpointMetadata.prototype, "inheritedEndpoint", void 0);
exports.EndpointMetadata = EndpointMetadata;

//# sourceMappingURL=EndpointMetadata.js.map
