{"version":3,"sources":["mvc/services/RouteService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAW,aAAa,EAAC,MAAM,UAAU,CAAC;AACjE,OAAO,EAAC,kBAAkB,EAAC,MAAM,4CAA4C,CAAC;AAC9E,OAAO,EAAC,kBAAkB,EAAC,MAAM,8BAA8B,CAAC;AAGhE,MAAM,WAAW,MAAM;IACrB,KAAK,EAAE,MAAM,CAAC;IACd,KAAK,EAAE,aAAa,CAAC;CACtB;AAED,MAAM,WAAW,gBAAgB;IAC/B,KAAK,EAAE,MAAM,CAAC;IACd,QAAQ,EAAE,kBAAkB,CAAC;CAC9B;AAED,MAAM,WAAW,aAAa;IAC5B,MAAM,EAAE,MAAM,CAAC;IACf,IAAI,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,SAAS,EAAE,MAAM,CAAC;IAClB,eAAe,EAAE,MAAM,CAAC;IACxB,UAAU,EAAE,GAAG,CAAC;IAChB,UAAU,CAAC,EAAE,GAAG,CAAC;CAClB;AAED;;GAEG;AACH,qBACa,YAAY;IAGX,OAAO,CAAC,QAAQ;IAAuC,OAAO,CAAC,kBAAkB;IAF7F,OAAO,CAAC,QAAQ,CAAC,OAAO,CAA0B;gBAE9B,QAAQ,EAAE,eAAe,EAA8B,kBAAkB,EAAE,kBAAkB;aAE7G,MAAM,EAAI,gBAAgB,EAAE;IAIzB,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE;IAMjC;;;;OAIG;IACI,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa;IAiBtD;;;OAGG;IACI,SAAS,IAAI,aAAa,EAAE;IAUnC;;OAEG;IACI,MAAM;IAIb;;;;OAIG;IACH,OAAO,CAAC,WAAW;CA4BpB","file":"RouteService.d.ts","sourcesContent":["import {InjectorService, Service, TokenProvider} from \"@tsed/di\";\nimport {ExpressApplication} from \"../../server/decorators/expressApplication\";\nimport {ControllerProvider} from \"../models/ControllerProvider\";\nimport {EndpointMetadata} from \"../models/EndpointMetadata\";\n\nexport interface IRoute {\n  route: string;\n  token: TokenProvider;\n}\n\nexport interface IRouteController {\n  route: string;\n  provider: ControllerProvider;\n}\n\nexport interface IRouteDetails {\n  method: string;\n  name: string;\n  url: string;\n  className: string;\n  methodClassName: string;\n  parameters: any;\n  returnType?: any;\n}\n\n/**\n * `RouteService` is used to provide all routes collected by annotation `@Controller`.\n */\n@Service()\nexport class RouteService {\n  private readonly _routes: IRouteController[] = [];\n\n  constructor(private injector: InjectorService, @ExpressApplication private expressApplication: ExpressApplication) {}\n\n  get routes(): IRouteController[] {\n    return this._routes || [];\n  }\n\n  public addRoutes(routes: IRoute[]) {\n    routes.forEach(routeSettings => {\n      this.addRoute(routeSettings.route, routeSettings.token);\n    });\n  }\n\n  /**\n   * Add a new route in the route registry\n   * @param endpoint\n   * @param token\n   */\n  public addRoute(endpoint: string, token: TokenProvider) {\n    if (this.injector.hasProvider(token)) {\n      const provider: ControllerProvider = this.injector.getProvider(token)! as any;\n      const route = provider.getEndpointUrl(endpoint);\n\n      if (!provider.hasParent()) {\n        this._routes.push({\n          route,\n          provider\n        });\n        this.expressApplication.use(route, provider.router);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Get all routes built by TsExpressDecorators and mounted on Express application.\n   * @returns {IControllerRoute[]}\n   */\n  public getRoutes(): IRouteDetails[] {\n    let routes: IRouteDetails[] = [];\n\n    this.routes.forEach((config: {route: string; provider: ControllerProvider}) => {\n      routes = routes.concat(this.buildRoutes(config.route, config.provider));\n    });\n\n    return routes;\n  }\n\n  /**\n   * @deprecated Use getRoutes instead of\n   */\n  public getAll() {\n    return this.getRoutes();\n  }\n\n  /**\n   *\n   * @param ctrl\n   * @param endpointUrl\n   */\n  private buildRoutes(endpointUrl: string, ctrl: ControllerProvider): IRouteDetails[] {\n    let routes: IRouteDetails[] = [];\n\n    ctrl.children\n      .map(ctrl => this.injector.getProvider(ctrl))\n      .forEach((provider: ControllerProvider) => {\n        routes = routes.concat(this.buildRoutes(`${endpointUrl}${provider.path}`, provider));\n      });\n\n    ctrl.endpoints.forEach((endpoint: EndpointMetadata) => {\n      const {pathsMethods, params, targetName, propertyKey} = endpoint;\n\n      pathsMethods.forEach(({path, method}) => {\n        if (!!method) {\n          routes.push({\n            method,\n            name: `${targetName}.${String(propertyKey)}()`,\n            url: `${endpointUrl}${path || \"\"}`.replace(/\\/\\//gi, \"/\"),\n            className: targetName,\n            methodClassName: String(propertyKey),\n            parameters: params\n          });\n        }\n      });\n    });\n\n    return routes;\n  }\n}\n"],"sourceRoot":"../../../src"}