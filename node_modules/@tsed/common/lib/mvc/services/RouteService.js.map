{"version":3,"sources":["mvc/services/RouteService.ts"],"names":[],"mappings":"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","file":"RouteService.js","sourcesContent":["import {InjectorService, Service, TokenProvider} from \"@tsed/di\";\nimport {ExpressApplication} from \"../../server/decorators/expressApplication\";\nimport {ControllerProvider} from \"../models/ControllerProvider\";\nimport {EndpointMetadata} from \"../models/EndpointMetadata\";\n\nexport interface IRoute {\n  route: string;\n  token: TokenProvider;\n}\n\nexport interface IRouteController {\n  route: string;\n  provider: ControllerProvider;\n}\n\nexport interface IRouteDetails {\n  method: string;\n  name: string;\n  url: string;\n  className: string;\n  methodClassName: string;\n  parameters: any;\n  returnType?: any;\n}\n\n/**\n * `RouteService` is used to provide all routes collected by annotation `@Controller`.\n */\n@Service()\nexport class RouteService {\n  private readonly _routes: IRouteController[] = [];\n\n  constructor(private injector: InjectorService, @ExpressApplication private expressApplication: ExpressApplication) {}\n\n  get routes(): IRouteController[] {\n    return this._routes || [];\n  }\n\n  public addRoutes(routes: IRoute[]) {\n    routes.forEach(routeSettings => {\n      this.addRoute(routeSettings.route, routeSettings.token);\n    });\n  }\n\n  /**\n   * Add a new route in the route registry\n   * @param endpoint\n   * @param token\n   */\n  public addRoute(endpoint: string, token: TokenProvider) {\n    if (this.injector.hasProvider(token)) {\n      const provider: ControllerProvider = this.injector.getProvider(token)! as any;\n      const route = provider.getEndpointUrl(endpoint);\n\n      if (!provider.hasParent()) {\n        this._routes.push({\n          route,\n          provider\n        });\n        this.expressApplication.use(route, provider.router);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Get all routes built by TsExpressDecorators and mounted on Express application.\n   * @returns {IControllerRoute[]}\n   */\n  public getRoutes(): IRouteDetails[] {\n    let routes: IRouteDetails[] = [];\n\n    this.routes.forEach((config: {route: string; provider: ControllerProvider}) => {\n      routes = routes.concat(this.buildRoutes(config.route, config.provider));\n    });\n\n    return routes;\n  }\n\n  /**\n   * @deprecated Use getRoutes instead of\n   */\n  public getAll() {\n    return this.getRoutes();\n  }\n\n  /**\n   *\n   * @param ctrl\n   * @param endpointUrl\n   */\n  private buildRoutes(endpointUrl: string, ctrl: ControllerProvider): IRouteDetails[] {\n    let routes: IRouteDetails[] = [];\n\n    ctrl.children\n      .map(ctrl => this.injector.getProvider(ctrl))\n      .forEach((provider: ControllerProvider) => {\n        routes = routes.concat(this.buildRoutes(`${endpointUrl}${provider.path}`, provider));\n      });\n\n    ctrl.endpoints.forEach((endpoint: EndpointMetadata) => {\n      const {pathsMethods, params, targetName, propertyKey} = endpoint;\n\n      pathsMethods.forEach(({path, method}) => {\n        if (!!method) {\n          routes.push({\n            method,\n            name: `${targetName}.${String(propertyKey)}()`,\n            url: `${endpointUrl}${path || \"\"}`.replace(/\\/\\//gi, \"/\"),\n            className: targetName,\n            methodClassName: String(propertyKey),\n            parameters: params\n          });\n        }\n      });\n    });\n\n    return routes;\n  }\n}\n"],"sourceRoot":"../../../src"}