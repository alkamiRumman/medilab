import { ProxyMap, Type } from "@tsed/core";
import { Configuration, InjectorService } from "@tsed/di";
import { ControllerProvider } from "../models/ControllerProvider";
import { IRouteController, RouteService } from "./RouteService";
/**
 * @private
 * @deprecated
 */
export declare class ControllerService extends ProxyMap<Type<any> | any, ControllerProvider> {
    private injectorService;
    private settings;
    private routeService;
    constructor(injectorService: InjectorService, settings: Configuration, routeService: RouteService);
    /**
     * @deprecated
     */
    readonly routes: IRouteController[];
    /**
     *
     * @param target
     * @returns {ControllerProvider}
     * @deprecated
     */
    static get(target: Type<any>): ControllerProvider | undefined;
    /**
     *
     * @param target
     * @deprecated
     */
    static has(target: Type<any>): boolean;
    /**
     *
     * @param target
     * @param provider
     * @deprecated
     */
    static set(target: Type<any>, provider: ControllerProvider): typeof ControllerService;
    /**
     * Invoke a controller from his Class.
     * @param target
     * @param locals
     * @param designParamTypes
     * @returns {T}
     * @deprecated
     */
    invoke<T>(target: any, locals?: Map<Type<any> | any, any>, designParamTypes?: any[]): T;
}
