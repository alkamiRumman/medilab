{"version":3,"sources":["mvc/services/ControllerService.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,QAAQ,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AACtD,OAAO,EAAC,aAAa,EAAc,eAAe,EAA8B,MAAM,UAAU,CAAC;AACjG,OAAO,EAAC,kBAAkB,EAAC,MAAM,8BAA8B,CAAC;AAEhE,OAAO,EAAC,gBAAgB,EAAE,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAE9D;;;GAGG;AACH,qBAIa,iBAAkB,SAAQ,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,kBAAkB,CAAC;IAEhF,OAAO,CAAC,eAAe;IACN,OAAO,CAAC,QAAQ;IACjC,OAAO,CAAC,YAAY;gBAFZ,eAAe,EAAE,eAAe,EACf,QAAQ,EAAE,aAAa,EACxC,YAAY,EAAE,YAAY;IAKpC;;OAEG;aAGC,MAAM,EAAI,gBAAgB,EAAE;IAIhC;;;;;OAKG;IAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,kBAAkB,GAAG,SAAS;IAI7D;;;;OAIG;IAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC;IAI5B;;;;;OAKG;IAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,kBAAkB;IAM1D;;;;;;;OAOG;IAEI,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,GAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,CAA6B,EAAE,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;CAG1H","file":"ControllerService.d.ts","sourcesContent":["import {Deprecated, ProxyMap, Type} from \"@tsed/core\";\nimport {Configuration, Injectable, InjectorService, ProviderScope, ProviderType} from \"@tsed/di\";\nimport {ControllerProvider} from \"../models/ControllerProvider\";\nimport {ControllerRegistry} from \"../registries/ControllerRegistry\";\nimport {IRouteController, RouteService} from \"./RouteService\";\n\n/**\n * @private\n * @deprecated\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON,\n  global: true\n})\nexport class ControllerService extends ProxyMap<Type<any> | any, ControllerProvider> {\n  constructor(\n    private injectorService: InjectorService,\n    @Configuration() private settings: Configuration,\n    private routeService: RouteService\n  ) {\n    super(injectorService as any, {filter: {type: ProviderType.CONTROLLER}});\n  }\n\n  /**\n   * @deprecated\n   */\n\n  /* istanbul ignore next */\n  get routes(): IRouteController[] {\n    return this.routeService.routes || [];\n  }\n\n  /**\n   *\n   * @param target\n   * @returns {ControllerProvider}\n   * @deprecated\n   */\n  @Deprecated(\"static ControllerService.get(). Removed feature.\")\n  static get(target: Type<any>): ControllerProvider | undefined {\n    return ControllerRegistry.get(target) as ControllerProvider;\n  }\n\n  /**\n   *\n   * @param target\n   * @deprecated\n   */\n  @Deprecated(\"static ControllerService.has(). Removed feature.\")\n  static has(target: Type<any>) {\n    return ControllerRegistry.has(target);\n  }\n\n  /**\n   *\n   * @param target\n   * @param provider\n   * @deprecated\n   */\n  @Deprecated(\"static ControllerService.set(). Removed feature.\")\n  static set(target: Type<any>, provider: ControllerProvider) {\n    ControllerRegistry.set(target, provider);\n\n    return this;\n  }\n\n  /**\n   * Invoke a controller from his Class.\n   * @param target\n   * @param locals\n   * @param designParamTypes\n   * @returns {T}\n   * @deprecated\n   */\n  @Deprecated(\"ControllerService.invoke(). Removed feature. Use injectorService.invoke instead of.\")\n  public invoke<T>(target: any, locals: Map<Type<any> | any, any> = new Map<Type<any>, any>(), designParamTypes?: any[]): T {\n    return this.injectorService.invoke<T>(target.provide || target, locals);\n  }\n}\n"],"sourceRoot":"../../../src"}