import { Type } from "@tsed/core";
import { IParamConstructorOptions, ParamMetadata } from "../models/ParamMetadata";
import { ParamTypes } from "../models/ParamTypes";
export declare class ParamRegistry {
    static get(target: Type<any>, propertyKey: string | symbol, index: number): ParamMetadata;
    static has(target: Type<any>, propertyKey: string | symbol, index: number): boolean;
    static set(target: Type<any>, propertyKey: string | symbol, index: number, paramMetadata: ParamMetadata): void;
    static getParams(target: Type<any>, propertyKey: string | symbol): ParamMetadata[];
    /**
     *
     * @param target
     * @param propertyKey
     * @param parameterIndex
     * @param allowedRequiredValues
     * @deprecated
     */
    static required(target: Type<any>, propertyKey: string | symbol, parameterIndex: number, allowedRequiredValues?: any[]): typeof ParamRegistry;
    /**
     * Create a parameters decorators
     * @param token
     * @param {Partial<IParamConstructorOptions<any>>} options
     * @returns {Function}
     * @deprecated
     */
    static decorate(token: string | Type<any> | ParamTypes, options?: Partial<IParamConstructorOptions>): ParameterDecorator;
    static useFilter(filter: string | Type<any> | ParamTypes, options: IParamConstructorOptions): ParamMetadata;
}
