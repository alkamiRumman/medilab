{"version":3,"sources":["mvc/registries/ParamRegistry.ts"],"names":[],"mappings":"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","file":"ParamRegistry.js","sourcesContent":["import {Deprecated, Metadata, Type} from \"@tsed/core\";\nimport {PARAM_METADATA} from \"../constants\";\nimport {IParamConstructorOptions, ParamMetadata} from \"../models/ParamMetadata\";\nimport {ParamTypes} from \"../models/ParamTypes\";\n\nexport class ParamRegistry {\n  static get(target: Type<any>, propertyKey: string | symbol, index: number): ParamMetadata {\n    const params = this.getParams(target, propertyKey);\n\n    if (!this.has(target, propertyKey, index)) {\n      params[index] = new ParamMetadata({target, propertyKey, index});\n      this.set(target, propertyKey, index, params[index]);\n    }\n\n    return params[index];\n  }\n\n  static has(target: Type<any>, propertyKey: string | symbol, index: number) {\n    return !!this.getParams(target, propertyKey)[index];\n  }\n\n  static set(target: Type<any>, propertyKey: string | symbol, index: number, paramMetadata: ParamMetadata): void {\n    const params = this.getParams(target, propertyKey);\n\n    params[index] = paramMetadata;\n\n    Metadata.set(PARAM_METADATA, params, target, propertyKey);\n  }\n\n  static getParams(target: Type<any>, propertyKey: string | symbol): ParamMetadata[] {\n    return Metadata.has(PARAM_METADATA, target, propertyKey) ? Metadata.get(PARAM_METADATA, target, propertyKey) : [];\n  }\n\n  /**\n   *\n   * @param target\n   * @param propertyKey\n   * @param parameterIndex\n   * @param allowedRequiredValues\n   * @deprecated\n   */\n  // istanbul ignore next\n  @Deprecated(\"ParamRegistry.decorate are deprecated.\")\n  static required(target: Type<any>, propertyKey: string | symbol, parameterIndex: number, allowedRequiredValues: any[] = []) {\n    const param = ParamRegistry.get(target, propertyKey, parameterIndex);\n\n    param.required = true;\n    param.allowedRequiredValues = allowedRequiredValues;\n\n    param.store.merge(\"responses\", {\n      \"400\": {\n        description: \"BadRequest\"\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Create a parameters decorators\n   * @param token\n   * @param {Partial<IParamConstructorOptions<any>>} options\n   * @returns {Function}\n   * @deprecated\n   */\n  // istanbul ignore next\n  @Deprecated(\"ParamRegistry.decorate are deprecated. Use UseFilter decorator instead\")\n  static decorate(token: string | Type<any> | ParamTypes, options: Partial<IParamConstructorOptions> = {}): ParameterDecorator {\n    return (target: Type<any>, propertyKey: string | symbol, index: number): any => {\n      if (typeof index === \"number\") {\n        const settings = Object.assign(\n          {\n            target,\n            propertyKey,\n            index\n          },\n          options\n        );\n\n        ParamRegistry.useFilter(token, settings);\n      }\n    };\n  }\n\n  static useFilter(filter: string | Type<any> | ParamTypes, options: IParamConstructorOptions): ParamMetadata {\n    const {expression, useType, propertyKey, index, target, useConverter, useValidation} = options;\n    let {paramType} = options;\n\n    const param = ParamRegistry.get(target, propertyKey, index);\n\n    if (typeof filter === \"string\") {\n      paramType = filter as ParamTypes;\n    }\n\n    param.service = filter;\n    param.useValidation = !!useValidation;\n    param.expression = expression!;\n\n    if (paramType) {\n      param.paramType = paramType!;\n    }\n\n    if (useType) {\n      param.type = useType;\n    }\n\n    if (useConverter !== undefined) {\n      param.useConverter = useConverter;\n    }\n\n    return param;\n  }\n}\n"],"sourceRoot":"../../../src"}