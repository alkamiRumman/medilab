/// <reference types="node" />
import { Env } from "@tsed/core";
import { DIConfiguration, ProviderScope } from "@tsed/di";
import * as Https from "https";
import { IErrorsSettings, ILoggerSettings, IRouterSettings, IServerMountDirectories } from "../interfaces";
/**
 * `ServerSettingsService` contains all information about [ServerLoader](/api/common/server/components/ServerLoader.md) configuration.
 */
export declare class ServerSettingsService extends DIConfiguration {
    constructor();
    version: string;
    rootDir: string;
    port: string | number;
    httpsOptions: Https.ServerOptions;
    httpPort: string | number;
    httpsPort: string | number;
    uploadDir: string;
    env: Env;
    mount: IServerMountDirectories;
    componentsScan: string[];
    statics: IServerMountDirectories;
    /**
     * @deprecated
     */
    /**
    * @deprecated
    */
    /* istanbul ignore next */
    serveStatics: IServerMountDirectories;
    acceptMimes: string[];
    debug: boolean;
    routers: IRouterSettings;
    validationModelStrict: boolean;
    logger: Partial<ILoggerSettings>;
    exclude: string[];
    /**
     * @deprecated
     */
    /**
    * @deprecated
    */
    controllerScope: ProviderScope;
    /**
     *
     * @returns {IRouterSettings}
     */
    /**
    *
    * @param {IRouterSettings} options
    */
    errors: IErrorsSettings;
    /**
     *
     * @param addressPort
     * @returns {{address: string, port: number}}
     */
    private static buildAddressAndPort;
    /**
     *
     * @returns {string|number}
     */
    getHttpPort(): {
        address: string;
        port: number;
    };
    /**
     *
     * @param settings
     */
    setHttpPort(settings: {
        address: string;
        port: number;
    }): void;
    /**
     *
     * @returns {string|number}
     */
    getHttpsPort(): {
        address: string;
        port: number;
    };
    /**
     *
     * @param settings
     */
    setHttpsPort(settings: {
        address: string;
        port: number;
    }): void;
}
