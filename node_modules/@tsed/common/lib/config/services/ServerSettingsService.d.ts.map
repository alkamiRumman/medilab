{"version":3,"sources":["config/services/ServerSettingsService.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,GAAG,EAAC,MAAM,YAAY,CAAC;AAC/B,OAAO,EAAC,eAAe,EAAc,aAAa,EAAe,MAAM,UAAU,CAAC;AAClF,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,uBAAuB,EAAC,MAAM,eAAe,CAAC;AAIzG;;GAEG;AACH,qBAIa,qBAAsB,SAAQ,eAAe;;IA6BpD,OAAO,EAII,MAAM;IAIjB,OAAO,EAIQ,MAAM;IAIrB,IAAI,EAAI,MAAM,GAAG,MAAM;IAQvB,YAAY,EAAI,KAAK,CAAC,aAAa;IAQnC,QAAQ,EAAI,MAAM,GAAG,MAAM;IAQ3B,SAAS,EAAI,MAAM,GAAG,MAAM;IAQ5B,SAAS,EAAI,MAAM;IAQnB,GAAG,EAAI,GAAG;IAQV,KAAK,EAAI,uBAAuB;IAQhC,cAAc,EAAI,MAAM,EAAE;IAQ1B,OAAO,EAAI,uBAAuB;IAQtC;;OAEG;;;;;IAGC,YAAY,EASQ,uBAAuB;IAI3C,WAAW,EAAI,MAAM,EAAE;IAQvB,KAAK,EAAI,OAAO;IAQhB,OAAO,EAAI,eAAe;IAQ1B,qBAAqB,EAAI,OAAO;IAUhC,MAAM,EAAI,OAAO,CAAC,eAAe,CAAC;IAgClC,OAAO,EAIU,MAAM,EAAE;IAI7B;;OAEG;;;;IACC,eAAe,EAAI,aAAa;IAWpC;;;OAGG;;;;;IACC,MAAM,EAAI,eAAe;IAY7B;;;;OAIG;IACH,OAAO,CAAC,MAAM,CAAC,mBAAmB;IAYlC;;;OAGG;IACH,WAAW,IAAI;QAAC,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAC;IAI9C;;;OAGG;IACH,WAAW,CAAC,QAAQ,EAAE;QAAC,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAC;IAIrD;;;OAGG;IACH,YAAY,IAAI;QAAC,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAC;IAI/C;;;OAGG;IACH,YAAY,CAAC,QAAQ,EAAE;QAAC,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAC;CAGvD","file":"ServerSettingsService.d.ts","sourcesContent":["import {Env} from \"@tsed/core\";\nimport {DIConfiguration, Injectable, ProviderScope, ProviderType} from \"@tsed/di\";\nimport * as Https from \"https\";\nimport {$log} from \"ts-log-debug\";\nimport {IErrorsSettings, ILoggerSettings, IRouterSettings, IServerMountDirectories} from \"../interfaces\";\n\nconst rootDir = process.cwd();\n\n/**\n * `ServerSettingsService` contains all information about [ServerLoader](/api/common/server/components/ServerLoader.md) configuration.\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON,\n  global: true\n})\nexport class ServerSettingsService extends DIConfiguration {\n  constructor() {\n    super({\n      rootDir,\n      env: (process.env.NODE_ENV as Env) || Env.DEV,\n      httpPort: 8080,\n      httpsPort: 8000,\n      version: \"1.0.0\",\n      uploadDir: \"${rootDir}/uploads\",\n      scopes: {\n        [ProviderType.CONTROLLER]: ProviderScope.SINGLETON\n      },\n      logger: {\n        debug: false,\n        level: \"info\",\n        logRequest: true,\n        jsonIndentation: process.env.NODE_ENV === Env.PROD ? 0 : 2\n      },\n      errors: {\n        headerName: \"errors\"\n      },\n      mount: {\n        \"/rest\": \"${rootDir}/controllers/**/*.ts\"\n      },\n      exclude: [\"**/*.spec.ts\", \"**/*.spec.js\"],\n      componentsScan: [\"${rootDir}/mvc/**/*.ts\", \"${rootDir}/services/**/*.ts\", \"${rootDir}/converters/**/*.ts\"]\n    });\n  }\n\n  get version() {\n    return this.map.get(\"version\");\n  }\n\n  set version(v: string) {\n    this.map.set(\"version\", v);\n  }\n\n  get rootDir() {\n    return this.map.get(\"rootDir\");\n  }\n\n  set rootDir(value: string) {\n    this.map.set(\"rootDir\", value);\n  }\n\n  get port(): string | number {\n    return this.httpPort;\n  }\n\n  set port(value: string | number) {\n    this.httpPort = value;\n  }\n\n  get httpsOptions(): Https.ServerOptions {\n    return this.map.get(\"httpsOptions\");\n  }\n\n  set httpsOptions(value: Https.ServerOptions) {\n    this.map.set(\"httpsOptions\", value);\n  }\n\n  get httpPort(): string | number {\n    return this.map.get(\"httpPort\");\n  }\n\n  set httpPort(value: string | number) {\n    this.map.set(\"httpPort\", value);\n  }\n\n  get httpsPort(): string | number {\n    return this.map.get(\"httpsPort\");\n  }\n\n  set httpsPort(value: string | number) {\n    this.map.set(\"httpsPort\", value);\n  }\n\n  get uploadDir(): string {\n    return this.get(\"uploadDir\");\n  }\n\n  set uploadDir(value: string) {\n    this.map.set(\"uploadDir\", value);\n  }\n\n  get env(): Env {\n    return this.map.get(\"env\");\n  }\n\n  set env(value: Env) {\n    this.map.set(\"env\", value);\n  }\n\n  get mount(): IServerMountDirectories {\n    return this.get(\"mount\");\n  }\n\n  set mount(value: IServerMountDirectories) {\n    this.map.set(\"mount\", value);\n  }\n\n  get componentsScan(): string[] {\n    return this.resolve(this.map.get(\"componentsScan\"));\n  }\n\n  set componentsScan(value: string[]) {\n    this.map.set(\"componentsScan\", value);\n  }\n\n  get statics(): IServerMountDirectories {\n    return this.map.get(\"statics\") || this.map.get(\"serveStatic\") || {};\n  }\n\n  set statics(value: IServerMountDirectories) {\n    this.map.set(\"statics\", value);\n  }\n\n  /**\n   * @deprecated\n   */\n\n  /* istanbul ignore next */\n  get serveStatics() {\n    return this.statics;\n  }\n\n  /**\n   * @deprecated\n   */\n\n  /* istanbul ignore next */\n  set serveStatics(value: IServerMountDirectories) {\n    this.statics = value;\n  }\n\n  get acceptMimes(): string[] {\n    return this.map.get(\"acceptMimes\") || [\"application/json\"];\n  }\n\n  set acceptMimes(value: string[]) {\n    this.map.set(\"acceptMimes\", value || []);\n  }\n\n  get debug(): boolean {\n    return this.logger.level === \"info\";\n  }\n\n  set debug(debug: boolean) {\n    this.logger = {...this.logger, level: debug ? \"debug\" : \"info\"};\n  }\n\n  get routers(): IRouterSettings {\n    return this.get(\"routers\") || {};\n  }\n\n  set routers(options: IRouterSettings) {\n    this.map.set(\"routers\", options);\n  }\n\n  get validationModelStrict(): boolean {\n    const value = this.map.get(\"validationModelStrict\");\n\n    return value === undefined ? true : value;\n  }\n\n  set validationModelStrict(value: boolean) {\n    this.map.set(\"validationModelStrict\", value);\n  }\n\n  get logger(): Partial<ILoggerSettings> {\n    return this.get(\"logger\");\n  }\n\n  set logger(value: Partial<ILoggerSettings>) {\n    const logger = {...this.logger, ...value};\n    logger.debug = logger.level === \"debug\";\n\n    this.map.set(\"logger\", logger);\n    this.map.set(\"debug\", logger.debug);\n\n    if (logger.format) {\n      $log.appenders.set(\"stdout\", {\n        type: \"stdout\",\n        levels: [\"info\", \"debug\"],\n        layout: {\n          type: \"pattern\",\n          pattern: logger.format\n        }\n      });\n\n      $log.appenders.set(\"stderr\", {\n        levels: [\"trace\", \"fatal\", \"error\", \"warn\"],\n        type: \"stderr\",\n        layout: {\n          type: \"pattern\",\n          pattern: logger.format\n        }\n      });\n    }\n  }\n\n  get exclude() {\n    return this.get(\"exclude\");\n  }\n\n  set exclude(exclude: string[]) {\n    this.map.set(\"exclude\", exclude);\n  }\n\n  /**\n   * @deprecated\n   */\n  get controllerScope(): ProviderScope {\n    return this.scopes[ProviderType.CONTROLLER];\n  }\n\n  /**\n   * @deprecated\n   */\n  set controllerScope(scope: ProviderScope) {\n    this.scopes[ProviderType.CONTROLLER] = scope;\n  }\n\n  /**\n   *\n   * @returns {IRouterSettings}\n   */\n  get errors(): IErrorsSettings {\n    return this.get(\"errors\");\n  }\n\n  /**\n   *\n   * @param {IRouterSettings} options\n   */\n  set errors(options: IErrorsSettings) {\n    this.map.set(\"errors\", options);\n  }\n\n  /**\n   *\n   * @param addressPort\n   * @returns {{address: string, port: number}}\n   */\n  private static buildAddressAndPort(addressPort: string | number): {address: string; port: number} {\n    let address = \"0.0.0.0\";\n    let port = addressPort;\n\n    if (typeof addressPort === \"string\" && addressPort.indexOf(\":\") > -1) {\n      [address, port] = addressPort.split(\":\");\n      port = +port;\n    }\n\n    return {address, port: port as number};\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpPort(): {address: string; port: number} {\n    return ServerSettingsService.buildAddressAndPort(this.map.get(\"httpPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpPort(settings: {address: string; port: number}) {\n    this.map.set(\"httpPort\", `${settings.address}:${settings.port}`);\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpsPort(): {address: string; port: number} {\n    return ServerSettingsService.buildAddressAndPort(this.map.get(\"httpsPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpsPort(settings: {address: string; port: number}) {\n    this.map.set(\"httpsPort\", `${settings.address}:${settings.port}`);\n  }\n}\n"],"sourceRoot":"../../../src"}