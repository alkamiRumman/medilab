"use strict";
var ServerSettingsService_1;
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const ts_log_debug_1 = require("ts-log-debug");
const rootDir = process.cwd();
/**
 * `ServerSettingsService` contains all information about [ServerLoader](/api/common/server/components/ServerLoader.md) configuration.
 */
let ServerSettingsService = ServerSettingsService_1 = class ServerSettingsService extends di_1.DIConfiguration {
    constructor() {
        super({
            rootDir,
            env: process.env.NODE_ENV || core_1.Env.DEV,
            httpPort: 8080,
            httpsPort: 8000,
            version: "1.0.0",
            uploadDir: "${rootDir}/uploads",
            scopes: {
                [di_1.ProviderType.CONTROLLER]: di_1.ProviderScope.SINGLETON
            },
            logger: {
                debug: false,
                level: "info",
                logRequest: true,
                jsonIndentation: process.env.NODE_ENV === core_1.Env.PROD ? 0 : 2
            },
            errors: {
                headerName: "errors"
            },
            mount: {
                "/rest": "${rootDir}/controllers/**/*.ts"
            },
            exclude: ["**/*.spec.ts", "**/*.spec.js"],
            componentsScan: ["${rootDir}/mvc/**/*.ts", "${rootDir}/services/**/*.ts", "${rootDir}/converters/**/*.ts"]
        });
    }
    get version() {
        return this.map.get("version");
    }
    set version(v) {
        this.map.set("version", v);
    }
    get rootDir() {
        return this.map.get("rootDir");
    }
    set rootDir(value) {
        this.map.set("rootDir", value);
    }
    get port() {
        return this.httpPort;
    }
    set port(value) {
        this.httpPort = value;
    }
    get httpsOptions() {
        return this.map.get("httpsOptions");
    }
    set httpsOptions(value) {
        this.map.set("httpsOptions", value);
    }
    get httpPort() {
        return this.map.get("httpPort");
    }
    set httpPort(value) {
        this.map.set("httpPort", value);
    }
    get httpsPort() {
        return this.map.get("httpsPort");
    }
    set httpsPort(value) {
        this.map.set("httpsPort", value);
    }
    get uploadDir() {
        return this.get("uploadDir");
    }
    set uploadDir(value) {
        this.map.set("uploadDir", value);
    }
    get env() {
        return this.map.get("env");
    }
    set env(value) {
        this.map.set("env", value);
    }
    get mount() {
        return this.get("mount");
    }
    set mount(value) {
        this.map.set("mount", value);
    }
    get componentsScan() {
        return this.resolve(this.map.get("componentsScan"));
    }
    set componentsScan(value) {
        this.map.set("componentsScan", value);
    }
    get statics() {
        return this.map.get("statics") || this.map.get("serveStatic") || {};
    }
    set statics(value) {
        this.map.set("statics", value);
    }
    /**
     * @deprecated
     */
    /* istanbul ignore next */
    get serveStatics() {
        return this.statics;
    }
    /**
     * @deprecated
     */
    /* istanbul ignore next */
    set serveStatics(value) {
        this.statics = value;
    }
    get acceptMimes() {
        return this.map.get("acceptMimes") || ["application/json"];
    }
    set acceptMimes(value) {
        this.map.set("acceptMimes", value || []);
    }
    get debug() {
        return this.logger.level === "info";
    }
    set debug(debug) {
        this.logger = Object.assign({}, this.logger, { level: debug ? "debug" : "info" });
    }
    get routers() {
        return this.get("routers") || {};
    }
    set routers(options) {
        this.map.set("routers", options);
    }
    get validationModelStrict() {
        const value = this.map.get("validationModelStrict");
        return value === undefined ? true : value;
    }
    set validationModelStrict(value) {
        this.map.set("validationModelStrict", value);
    }
    get logger() {
        return this.get("logger");
    }
    set logger(value) {
        const logger = Object.assign({}, this.logger, value);
        logger.debug = logger.level === "debug";
        this.map.set("logger", logger);
        this.map.set("debug", logger.debug);
        if (logger.format) {
            ts_log_debug_1.$log.appenders.set("stdout", {
                type: "stdout",
                levels: ["info", "debug"],
                layout: {
                    type: "pattern",
                    pattern: logger.format
                }
            });
            ts_log_debug_1.$log.appenders.set("stderr", {
                levels: ["trace", "fatal", "error", "warn"],
                type: "stderr",
                layout: {
                    type: "pattern",
                    pattern: logger.format
                }
            });
        }
    }
    get exclude() {
        return this.get("exclude");
    }
    set exclude(exclude) {
        this.map.set("exclude", exclude);
    }
    /**
     * @deprecated
     */
    get controllerScope() {
        return this.scopes[di_1.ProviderType.CONTROLLER];
    }
    /**
     * @deprecated
     */
    set controllerScope(scope) {
        this.scopes[di_1.ProviderType.CONTROLLER] = scope;
    }
    /**
     *
     * @returns {IRouterSettings}
     */
    get errors() {
        return this.get("errors");
    }
    /**
     *
     * @param {IRouterSettings} options
     */
    set errors(options) {
        this.map.set("errors", options);
    }
    /**
     *
     * @param addressPort
     * @returns {{address: string, port: number}}
     */
    static buildAddressAndPort(addressPort) {
        let address = "0.0.0.0";
        let port = addressPort;
        if (typeof addressPort === "string" && addressPort.indexOf(":") > -1) {
            [address, port] = addressPort.split(":");
            port = +port;
        }
        return { address, port: port };
    }
    /**
     *
     * @returns {string|number}
     */
    getHttpPort() {
        return ServerSettingsService_1.buildAddressAndPort(this.map.get("httpPort"));
    }
    /**
     *
     * @param settings
     */
    setHttpPort(settings) {
        this.map.set("httpPort", `${settings.address}:${settings.port}`);
    }
    /**
     *
     * @returns {string|number}
     */
    getHttpsPort() {
        return ServerSettingsService_1.buildAddressAndPort(this.map.get("httpsPort"));
    }
    /**
     *
     * @param settings
     */
    setHttpsPort(settings) {
        this.map.set("httpsPort", `${settings.address}:${settings.port}`);
    }
};
ServerSettingsService = ServerSettingsService_1 = tslib_1.__decorate([
    di_1.Injectable({
        scope: di_1.ProviderScope.SINGLETON,
        global: true
    }),
    tslib_1.__metadata("design:paramtypes", [])
], ServerSettingsService);
exports.ServerSettingsService = ServerSettingsService;

//# sourceMappingURL=ServerSettingsService.js.map
