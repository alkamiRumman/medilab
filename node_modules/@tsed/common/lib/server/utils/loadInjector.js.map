{"version":3,"sources":["server/utils/loadInjector.ts"],"names":[],"mappings":";;;AACA,mCAAoC;AACpC,uDAAkD;AAElD,SAAsB,YAAY,CAAC,QAAyB,EAAE,YAAuB,iCAAe,EAAE;;QACpG,uCAAuC;QACvC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAEjC,4BAA4B;QAC5B,QAAQ,CAAC,oBAAoB,EAAE,CAAC;QAEhC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACvC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,MAAM,CAAC,eAAS,CAAC,CAAC;QAE3B,OAAO,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;CAAA;AAdD,oCAcC","file":"loadInjector.js","sourcesContent":["import {Container, InjectorService} from \"@tsed/di\";\nimport {MvcModule} from \"../../mvc\";\nimport {createContainer} from \"./createContainer\";\n\nexport async function loadInjector(injector: InjectorService, container: Container = createContainer()) {\n  // Clone all providers in the container\n  injector.addProviders(container);\n\n  // Resolve all configuration\n  injector.resolveConfiguration();\n\n  injector.settings.forEach((value, key) => {\n    injector.logger.debug(`settings.${key} =>`, value);\n  });\n\n  injector.invoke(MvcModule);\n\n  return injector.load(container);\n}\n"],"sourceRoot":"../../../src"}