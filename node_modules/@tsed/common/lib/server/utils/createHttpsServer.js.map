{"version":3,"sources":["server/utils/createHttpsServer.ts"],"names":[],"mappings":";;AAAA,iCAAyF;AACzF,+BAA+B;AAC/B,yEAAoE;AACpE,2DAAsD;AAEtD,SAAgB,iBAAiB,CAAC,QAAyB;IACzD,QAAQ,CAAC,YAAY,CAAC,yBAAW,CAAC,CAAC;AACrC,CAAC;AAFD,8CAEC;AAED,qBAAgB,CAAC;IACf,OAAO,EAAE,yBAAW;IACpB,IAAI,EAAE,CAAC,uCAAkB,EAAE,kBAAa,CAAC;IACzC,KAAK,EAAE,kBAAa,CAAC,SAAS;IAC9B,MAAM,EAAE,IAAI;IACZ,UAAU,CAAC,kBAAsC,EAAE,QAAuB;QACxE,MAAM,OAAO,GAAG,QAAQ,CAAC,YAAa,CAAC;QAEvC,OAAO,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;IACzD,CAAC;CACF,CAAC,CAAC","file":"createHttpsServer.js","sourcesContent":["import {Configuration, InjectorService, ProviderScope, registerProvider} from \"@tsed/di\";\nimport * as Https from \"https\";\nimport {ExpressApplication} from \"../decorators/expressApplication\";\nimport {HttpsServer} from \"../decorators/httpsServer\";\n\nexport function createHttpsServer(injector: InjectorService): void {\n  injector.forkProvider(HttpsServer);\n}\n\nregisterProvider({\n  provide: HttpsServer,\n  deps: [ExpressApplication, Configuration],\n  scope: ProviderScope.SINGLETON,\n  global: true,\n  useFactory(expressApplication: ExpressApplication, settings: Configuration) {\n    const options = settings.httpsOptions!;\n\n    return Https.createServer(options, expressApplication);\n  }\n});\n"],"sourceRoot":"../../../src"}