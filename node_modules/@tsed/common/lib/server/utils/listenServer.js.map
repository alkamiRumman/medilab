{"version":3,"sources":["server/utils/listenServer.ts"],"names":[],"mappings":";;AAGA,SAAgB,YAAY,CAAC,IAAgC,EAAE,QAAkE;IAC/H,MAAM,EAAC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAC,GAAG,QAAQ,CAAC;IAExC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9C,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;QACX,MAAM,IAAI,GAAI,IAAI,CAAC,OAAO,EAAU,CAAC,IAAI,CAAC;QAE1C,OAAO,EAAC,OAAO,EAAE,QAAQ,CAAC,OAAiB,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAc,CAAC,CAAC;IAElC,OAAO,OAAO,CAAC;AACjB,CAAC;AAdD,oCAcC","file":"listenServer.js","sourcesContent":["import * as Http from \"http\";\nimport * as Https from \"https\";\n\nexport function listenServer(http: Http.Server | Https.Server, settings: {https: boolean; address: string | number; port: number}): Promise<{address: string; port: number, https: boolean}> {\n  const {address, port, https} = settings;\n\n  const promise = new Promise((resolve, reject) => {\n    http.on(\"listening\", resolve).on(\"error\", reject);\n  }).then(() => {\n    const port = (http.address() as any).port;\n\n    return {address: settings.address as string, port, https};\n  });\n\n  http.listen(port, address as any);\n\n  return promise;\n}\n"],"sourceRoot":"../../../src"}