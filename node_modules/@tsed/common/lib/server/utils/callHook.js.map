{"version":3,"sources":["server/utils/callHook.ts"],"names":[],"mappings":";;;AACA,6BAA6B;AAE7B,MAAM,UAAU,GAAG,CAAC,aAAa,EAAE,YAAY,EAAE,SAAS,EAAE,wBAAwB,CAAC,CAAC;AAEtF,SAAsB,QAAQ,CAAC,QAAyB,EAAE,UAAe,EAAE,GAAW,EAAE,GAAG,IAAW;;QACpG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,GAAG,UAAU,CAAC,CAAC;QAExD,IAAI,GAAG,IAAI,UAAU,EAAE;YACrB,MAAM,gBAAgB,GAAG,CAAC,IAAY,EAAE,OAAgB,EAAE,EAAE,CAC1D,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAE,CAAC,EAAE,GAAG,IAAI,wBAAwB,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,sBAAsB,EAAE,CAAC,EAAE,CAAC;YAE9H,IAAI,GAAG,KAAK,SAAS,EAAE;gBACrB,gBAAgB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;aAC5C;YACD,IAAI,GAAG,KAAK,wBAAwB,EAAE;gBACpC,gBAAgB,CAAC,wBAAwB,EAAE,mBAAmB,CAAC,CAAC;aACjE;YAED,uBAAuB;YACvB,IAAI,GAAG,KAAK,oBAAoB,EAAE;gBAChC,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;aACxC;YAED,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;SAChC;QAED,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC7B,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC1B;IACH,CAAC;CAAA;AAzBD,4BAyBC","file":"callHook.js","sourcesContent":["import {InjectorService} from \"@tsed/di\";\nimport * as util from \"util\";\n\nconst SKIP_HOOKS = [\"$beforeInit\", \"$afterInit\", \"$onInit\", \"$onMountingMiddlewares\"];\n\nexport async function callHook(injector: InjectorService, rootModule: any, key: string, ...args: any[]) {\n  injector.logger.info(`\\x1B[1mCall hook ${key}\\x1B[22m`);\n\n  if (key in rootModule) {\n    const hookDepreciation = (hook: string, newHook?: string) =>\n      util.deprecate(() => {}, `${hook} hook is deprecated. ${newHook ? \"Use\" + newHook + \"instead\" : \"Hook will be removed\"}`)();\n\n    if (key === \"$onInit\") {\n      hookDepreciation(\"$onInit\", \"$beforeInit\");\n    }\n    if (key === \"$onMountingMiddlewares\") {\n      hookDepreciation(\"$onMountingMiddlewares\", \"$beforeRoutesInit\");\n    }\n\n    // istanbul ignore next\n    if (key === \"$onServerInitError\") {\n      hookDepreciation(\"$onServerInitError\");\n    }\n\n    await rootModule[key](...args);\n  }\n\n  if (!SKIP_HOOKS.includes(key)) {\n    await injector.emit(key);\n  }\n}\n"],"sourceRoot":"../../../src"}