{"version":3,"sources":["server/utils/importComponents.ts"],"names":[],"mappings":";;;AAAA,qCAA4C;AAE5C,+CAA0C;AAE1C,SAAe,cAAc,CAAC,IAAS,EAAE,QAAkB;;QACzD,IAAI,cAAO,CAAC,IAAI,CAAC,EAAE;YACjB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;SACrB;QAED,OAAO,yBAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;CAAA;AAED,SAAgB,gBAAgB,CAAC,MAAW;IAC1C,IAAI,cAAO,CAAC,MAAM,CAAC,EAAE;QACnB,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAU,EAAE,EAAE;YAC/B,OAAO;gBACL,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;aACzB,CAAC;QACJ,CAAC,CAAC,CAAC;KACJ;IAED,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,IAAW,EAAE,GAAW,EAAE,EAAE;QAC7D,IAAI,CAAC,IAAI,CAAC;YACR,QAAQ,EAAE,GAAG;YACb,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC/B,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAjBD,4CAiBC;AAED,SAAsB,gBAAgB,CAAC,MAAW,EAAE,QAAkB;;QACpE,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAElC,MAAM,IAAI,GAA8B,EAAE,CAAC;QAE3C,KAAK,MAAM,MAAM,IAAI,MAAM,EAAE;YAC3B,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE;gBACjC,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;gBAEtD,OAAO;qBACJ,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,cAAO,CAAC,MAAM,CAAC,CAAC;qBACjC,OAAO,CAAC,MAAM,CAAC,EAAE;oBAChB,MAAM,QAAQ,GAA4B,EAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,QAAQ,EAAC,CAAC;oBAElF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACtB,CAAC,CAAC,CAAC;aACN;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CAAA;AApBD,4CAoBC","file":"importComponents.js","sourcesContent":["import {isArray, isClass} from \"@tsed/core\";\nimport {IProvider} from \"@tsed/di\";\nimport {importFiles} from \"./importFiles\";\n\nasync function resolveSymbols(item: any, excludes: string[]) {\n  if (isClass(item)) {\n    return await [item];\n  }\n\n  return importFiles(item, excludes);\n}\n\nexport function mapConfiguration(config: any): {endpoint?: string; values: any[]}[] {\n  if (isArray(config)) {\n    return config.map((value: any) => {\n      return {\n        values: [].concat(value)\n      };\n    });\n  }\n\n  return Object.keys(config).reduce((list: any[], key: string) => {\n    list.push({\n      endpoint: key,\n      values: [].concat(config[key])\n    });\n\n    return list;\n  }, []);\n}\n\nexport async function importComponents(config: any, excludes: string[]): Promise<Partial<IProvider<any>>[]> {\n  config = mapConfiguration(config);\n\n  const list: Partial<IProvider<any>>[] = [];\n\n  for (const option of config) {\n    for (const value of option.values) {\n      const symbols = await resolveSymbols(value, excludes);\n\n      symbols\n        .filter(symbol => isClass(symbol))\n        .forEach(symbol => {\n          const provider: Partial<IProvider<any>> = {token: symbol, route: option.endpoint};\n\n          list.push(provider);\n        });\n    }\n  }\n\n  return list;\n}\n"],"sourceRoot":"../../../src"}