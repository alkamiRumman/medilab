{"version":3,"sources":["server/utils/importComponents.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,SAAS,EAAC,MAAM,UAAU,CAAC;AAWnC,wBAAgB,gBAAgB,CAAC,MAAM,EAAE,GAAG,GAAG;IAAC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAAC,MAAM,EAAE,GAAG,EAAE,CAAA;CAAC,EAAE,CAiBlF;AAED,wBAAsB,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAoB1G","file":"importComponents.d.ts","sourcesContent":["import {isArray, isClass} from \"@tsed/core\";\nimport {IProvider} from \"@tsed/di\";\nimport {importFiles} from \"./importFiles\";\n\nasync function resolveSymbols(item: any, excludes: string[]) {\n  if (isClass(item)) {\n    return await [item];\n  }\n\n  return importFiles(item, excludes);\n}\n\nexport function mapConfiguration(config: any): {endpoint?: string; values: any[]}[] {\n  if (isArray(config)) {\n    return config.map((value: any) => {\n      return {\n        values: [].concat(value)\n      };\n    });\n  }\n\n  return Object.keys(config).reduce((list: any[], key: string) => {\n    list.push({\n      endpoint: key,\n      values: [].concat(config[key])\n    });\n\n    return list;\n  }, []);\n}\n\nexport async function importComponents(config: any, excludes: string[]): Promise<Partial<IProvider<any>>[]> {\n  config = mapConfiguration(config);\n\n  const list: Partial<IProvider<any>>[] = [];\n\n  for (const option of config) {\n    for (const value of option.values) {\n      const symbols = await resolveSymbols(value, excludes);\n\n      symbols\n        .filter(symbol => isClass(symbol))\n        .forEach(symbol => {\n          const provider: Partial<IProvider<any>> = {token: symbol, route: option.endpoint};\n\n          list.push(provider);\n        });\n    }\n  }\n\n  return list;\n}\n"],"sourceRoot":"../../../src"}