{"version":3,"sources":["server/utils/callHook.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAC,MAAM,UAAU,CAAC;AAKzC,wBAAsB,QAAQ,CAAC,QAAQ,EAAE,eAAe,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,iBAyBrG","file":"callHook.d.ts","sourcesContent":["import {InjectorService} from \"@tsed/di\";\nimport * as util from \"util\";\n\nconst SKIP_HOOKS = [\"$beforeInit\", \"$afterInit\", \"$onInit\", \"$onMountingMiddlewares\"];\n\nexport async function callHook(injector: InjectorService, rootModule: any, key: string, ...args: any[]) {\n  injector.logger.info(`\\x1B[1mCall hook ${key}\\x1B[22m`);\n\n  if (key in rootModule) {\n    const hookDepreciation = (hook: string, newHook?: string) =>\n      util.deprecate(() => {}, `${hook} hook is deprecated. ${newHook ? \"Use\" + newHook + \"instead\" : \"Hook will be removed\"}`)();\n\n    if (key === \"$onInit\") {\n      hookDepreciation(\"$onInit\", \"$beforeInit\");\n    }\n    if (key === \"$onMountingMiddlewares\") {\n      hookDepreciation(\"$onMountingMiddlewares\", \"$beforeRoutesInit\");\n    }\n\n    // istanbul ignore next\n    if (key === \"$onServerInitError\") {\n      hookDepreciation(\"$onServerInitError\");\n    }\n\n    await rootModule[key](...args);\n  }\n\n  if (!SKIP_HOOKS.includes(key)) {\n    await injector.emit(key);\n  }\n}\n"],"sourceRoot":"../../../src"}