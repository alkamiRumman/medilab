{"version":3,"sources":["server/services/ServeStaticService.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,OAAO,MAAM,SAAS,CAAC;AACnC,OAAO,EAAC,uBAAuB,EAAC,MAAM,cAAc,CAAC;AAGrD,qBACa,kBAAkB;IACG,OAAO,CAAC,UAAU;gBAAV,UAAU,EAAE,OAAO,CAAC,WAAW;IAEvE,OAAO,CAAC,OAAO,EAAE,uBAAuB;IAOxC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM;CAUtC","file":"ServeStaticService.d.ts","sourcesContent":["import {Service} from \"@tsed/di\";\nimport * as Express from \"express\";\nimport {IServerMountDirectories} from \"../../config\";\nimport {ExpressApplication} from \"../decorators/expressApplication\";\n\n@Service()\nexport class ServeStaticService {\n  constructor(@ExpressApplication private expressApp: Express.Application) {}\n\n  statics(statics: IServerMountDirectories) {\n    /* istanbul ignore else */\n    Object.keys(statics).forEach(path => {\n      [].concat(statics[path] as any).forEach((directory: string) => this.mount(path, directory));\n    });\n  }\n\n  mount(path: string, directory: string) {\n    const middleware = Express.static(directory);\n    this.expressApp.use(path, (request: any, response: any, next: any) => {\n      if (!response.headersSent) {\n        middleware(request, response, next);\n      } else {\n        next();\n      }\n    });\n  }\n}\n"],"sourceRoot":"../../../src"}