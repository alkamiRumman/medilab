{"version":3,"sources":["jsonschema/class/JsonSchema.ts"],"names":[],"mappings":"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","file":"JsonSchema.d.ts","sourcesContent":["import {\n  deepExtends,\n  descriptorOf,\n  Enumerable,\n  isArrayOrArrayClass,\n  isDate,\n  isPrimitiveOrPrimitiveClass,\n  nameOf,\n  NotEnumerable,\n  primitiveOf\n} from \"@tsed/core\";\nimport {JSONSchema6, JSONSchema6Type, JSONSchema6TypeName} from \"json-schema\";\n\n/**\n *\n * @type {string[]}\n */\nexport const JSON_TYPES = [\"string\", \"number\", \"integer\", \"boolean\", \"object\", \"array\", \"null\", \"any\"];\n/**\n *\n * @type {string[]}\n */\nexport const AUTO_MAP_KEYS: string[] = [];\n\n/**\n * Internal use only.\n * @returns {Function}\n * @decorator\n * @private\n * @param target\n * @param propertyKey\n */\nfunction AutoMapKey(target: any, propertyKey: string): any {\n  AUTO_MAP_KEYS.push(propertyKey);\n\n  const descriptor = descriptorOf(target, propertyKey) || {configurable: true, writable: true};\n  descriptor.enumerable = true;\n\n  return descriptor;\n}\n\nexport class JsonSchema implements JSONSchema6 {\n  /**\n   *\n   * @type {string}\n   */\n  @Enumerable()\n  $id: string;\n  @Enumerable()\n  id: string;\n  @AutoMapKey\n  $ref: string;\n  @Enumerable()\n  $schema: any;\n  @Enumerable()\n  title: string;\n  @Enumerable()\n  description: string;\n  @Enumerable()\n  default: JSONSchema6Type;\n  @Enumerable()\n  additionalItems: boolean | JSONSchema6;\n  @Enumerable()\n  items: JsonSchema;\n  @Enumerable()\n  maxItems: number;\n  @Enumerable()\n  minItems: number;\n  @Enumerable()\n  uniqueItems: boolean;\n  @Enumerable()\n  maxProperties: number;\n  @Enumerable()\n  minProperties: number;\n  @Enumerable()\n  required: any | string[];\n  @Enumerable()\n  properties: {[key: string]: JsonSchema};\n  @Enumerable()\n  additionalProperties: JsonSchema;\n  @Enumerable()\n  definitions: {[p: string]: JSONSchema6};\n  @Enumerable()\n  patternProperties: {[p: string]: JSONSchema6};\n  @Enumerable()\n  dependencies: {[p: string]: JSONSchema6 | string[]};\n  @Enumerable()\n  allOf: JSONSchema6[];\n  @Enumerable()\n  anyOf: JSONSchema6[];\n  @Enumerable()\n  oneOf: JSONSchema6[];\n  @Enumerable()\n  not: JSONSchema6;\n  @Enumerable()\n  extends: string | string[];\n  @AutoMapKey\n  multipleOf: number;\n  @AutoMapKey\n  maximum: number;\n  @AutoMapKey\n  exclusiveMaximum: number;\n  @AutoMapKey\n  minimum: number;\n  @AutoMapKey\n  exclusiveMinimum: number;\n  @AutoMapKey\n  maxLength: number;\n  @AutoMapKey\n  minLength: number;\n  @AutoMapKey\n  pattern: string;\n  @AutoMapKey\n  format: string;\n  @AutoMapKey\n  enum: JSONSchema6Type[];\n\n  @NotEnumerable()\n  private _refName: string;\n  @NotEnumerable()\n  private _isCollection: boolean;\n  @NotEnumerable()\n  private _type: JSONSchema6TypeName | JSONSchema6TypeName[];\n  private _proxy: any;\n\n  [key: string]: any;\n\n  constructor() {\n    this._proxy = new Proxy<JsonSchema>(this, {\n      set(schema: JsonSchema, propertyKey: any, value: any) {\n        schema.mapValue(propertyKey, value);\n\n        return true;\n      }\n    } as any);\n  }\n\n  /**\n   *\n   * @returns {JSONSchema6}\n   */\n  @NotEnumerable()\n  get mapper(): JSONSchema6 {\n    return this._proxy;\n  }\n\n  /**\n   *\n   * @returns {any | JSONSchema6TypeName | JSONSchema6TypeName[]}\n   */\n  get type(): any | JSONSchema6TypeName | JSONSchema6TypeName[] {\n    return this._type;\n  }\n\n  /**\n   *\n   * @param {any | JSONSchema6TypeName | JSONSchema6TypeName[]} value\n   */\n  @Enumerable()\n  set type(value: any | JSONSchema6TypeName | JSONSchema6TypeName[]) {\n    if (value) {\n      this._refName = nameOf(value);\n      this._type = JsonSchema.getJsonType(value);\n    } else {\n      delete this._refName;\n      delete this._type;\n    }\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get refName() {\n    return this._refName;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isCollection(): boolean {\n    return this._isCollection;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isArray(): boolean {\n    return this.type === \"array\";\n  }\n\n  /**\n   *\n   * @returns {\"collection\" | JSONSchema6TypeName | JSONSchema6TypeName[]}\n   */\n  get schemaType(): \"collection\" | JSONSchema6TypeName | JSONSchema6TypeName[] {\n    if (this.isCollection) {\n      if (!this.isArray) {\n        return \"collection\";\n      }\n    }\n\n    return this.type;\n  }\n\n  /**\n   *\n   * @param value\n   * @returns {JSONSchema6TypeName | JSONSchema6TypeName[]}\n   */\n  static getJsonType(value: any): JSONSchema6TypeName | JSONSchema6TypeName[] {\n    if (isPrimitiveOrPrimitiveClass(value)) {\n      if (JSON_TYPES.indexOf(value as string) > -1) {\n        return value;\n      }\n\n      return primitiveOf(value);\n    }\n\n    if (isArrayOrArrayClass(value)) {\n      if (value !== Array) {\n        return value;\n      }\n\n      return \"array\";\n    }\n\n    if (isDate(value)) {\n      return \"string\";\n    }\n\n    return \"object\";\n  }\n\n  /**\n   *\n   * @param type\n   * @returns {JSONSchema6}\n   */\n  static ref(type: any): JsonSchema {\n    const schema = new JsonSchema();\n    schema.$ref = `#/definitions/${nameOf(type)}`;\n\n    return schema;\n  }\n\n  /**\n   * Write value on the right place according to the schema type\n   */\n  mapValue(key: string, value: any) {\n    switch (this.schemaType) {\n      case \"collection\":\n        this.additionalProperties[key] = value;\n        break;\n      case \"array\":\n        this.items[key] = value;\n        break;\n      default:\n        this[key] = value;\n    }\n  }\n\n  /**\n   *\n   * @param collectionType\n   */\n  toCollection(collectionType: any) {\n    this._isCollection = true;\n\n    if (isArrayOrArrayClass(collectionType)) {\n      this.items = this.items || new JsonSchema();\n      this.items.type = this._type;\n      this._type = \"array\";\n\n      this.forwardKeysTo(this, \"items\");\n    } else {\n      this.additionalProperties = new JsonSchema();\n      this.additionalProperties.type = this._type;\n      delete this._type;\n\n      this.forwardKeysTo(this, \"additionalProperties\");\n    }\n  }\n\n  /**\n   *\n   * @returns {{}}\n   */\n  toJSON() {\n    const obj: any = {};\n\n    for (const key in this) {\n      if (!key.match(/^_/) && typeof this[key] !== \"function\") {\n        const value: any = this[key];\n\n        if (value !== undefined) {\n          if (value instanceof JsonSchema) {\n            obj[key] = value.toJSON();\n          } else {\n            obj[key] = value;\n          }\n        }\n      }\n    }\n\n    return obj;\n  }\n\n  toObject() {\n    return JSON.parse(JSON.stringify(this.toJSON()));\n  }\n\n  /**\n   *\n   * @param obj\n   */\n  merge(obj: any): this {\n    deepExtends(this, obj);\n\n    return this;\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} property\n   */\n  private forwardKeysTo(instance: any, property: string) {\n    AUTO_MAP_KEYS.forEach(key => {\n      if (instance[key]) {\n        instance[property][key] = instance[key];\n        delete instance[key];\n      }\n    });\n  }\n}\n"],"sourceRoot":"../../../src"}