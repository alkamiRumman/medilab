{"version":3,"sources":["jsonschema/class/PropertyMetadata.ts"],"names":[],"mappings":";;;AAAA,qCAAsD;AAEtD,2EAAsE;AAGtE,MAAa,gBAAiB,SAAQ,eAAQ;IAiB5C,YAAY,MAAW,EAAE,WAAgB;QACvC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAjB7B;;;WAGG;QAEI,0BAAqB,GAAU,EAAE,CAAC;QAGlC,mBAAc,GAAY,KAAK,CAAC;QAUrC,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACH,IAAI,IAAI,CAAC,KAAgB;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,MAAM,CAAC;QAC7B,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,IAAI,QAAQ;QACV,OAAO,yCAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAK,IAAI,CAAC,WAAsB,CAAC,CAAC;IAC9F,CAAC;IAED;;;OAGG;IACH,IAAI,QAAQ,CAAC,KAAc;QACzB,yCAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAK,IAAI,CAAC,WAAsB,EAAE,KAAK,CAAC,CAAC;IAC9F,CAAC;IAEO,gBAAgB;QACtB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,yCAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAqB,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;IAClI,CAAC;CACF;AA5DC;IADC,iBAAU,EAAE;;+DAC4B;AAGzC;IADC,iBAAU,EAAE;;wDAC0B;AAGvC;IADC,iBAAU,EAAE;sCACO,QAAQ;qDAAC;AAG7B;IADC,iBAAU,EAAE;sCACS,QAAQ;uDAAC;AAfjC,4CAkEC","file":"PropertyMetadata.js","sourcesContent":["import {Enumerable, Storable, Type} from \"@tsed/core\";\nimport {IPropertyOptions} from \"../../converters/interfaces/IPropertyOptions\";\nimport {JsonSchemesRegistry} from \"../registries/JsonSchemesRegistry\";\nimport {JsonSchema} from \"./JsonSchema\";\n\nexport class PropertyMetadata extends Storable implements IPropertyOptions {\n  /**\n   * Allowed value when the entity is required.\n   * @type {Array}\n   */\n  @Enumerable()\n  public allowedRequiredValues: any[] = [];\n\n  @Enumerable()\n  public ignoreProperty: boolean = false;\n\n  @Enumerable()\n  public onSerialize: Function;\n\n  @Enumerable()\n  public onDeserialize: Function;\n\n  constructor(target: any, propertyKey: any) {\n    super(target, propertyKey);\n    this.createJsonSchema();\n  }\n\n  /**\n   *\n   * @returns {Type<any>}\n   */\n  get type(): Type<any> {\n    return this._type;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set type(value: Type<any>) {\n    this._type = value || Object;\n    this.createJsonSchema();\n  }\n\n  /**\n   *\n   * @returns {JsonSchema}\n   */\n  get schema(): JsonSchema {\n    return this.store.get(\"schema\");\n  }\n\n  /**\n   * Return the required state.\n   * @returns {boolean}\n   */\n  get required(): boolean {\n    return JsonSchemesRegistry.required(this.target, this.name || (this.propertyKey as string));\n  }\n\n  /**\n   * Change the state of the required data.\n   * @param value\n   */\n  set required(value: boolean) {\n    JsonSchemesRegistry.required(this.target, this.name || (this.propertyKey as string), value);\n  }\n\n  private createJsonSchema() {\n    this.store.set(\"schema\", JsonSchemesRegistry.property(this.target, this.propertyKey as string, this.type, this.collectionType));\n  }\n}\n"],"sourceRoot":"../../../src"}