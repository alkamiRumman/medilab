{"version":3,"sources":["jsonschema/class/PropertyMetadata.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,QAAQ,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AACtD,OAAO,EAAC,gBAAgB,EAAC,MAAM,8CAA8C,CAAC;AAE9E,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAC;AAExC,qBAAa,gBAAiB,SAAQ,QAAS,YAAW,gBAAgB;IACxE;;;OAGG;IAEI,qBAAqB,EAAE,GAAG,EAAE,CAAM;IAGlC,cAAc,EAAE,OAAO,CAAS;IAGhC,WAAW,EAAE,QAAQ,CAAC;IAGtB,aAAa,EAAE,QAAQ,CAAC;gBAEnB,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG;IAKzC;;;OAGG;;;;;IACC,IAAI,EAAI,IAAI,CAAC,GAAG,CAAC;IAarB;;;OAGG;aACC,MAAM,EAAI,UAAU;IAIxB;;;OAGG;;;;;IACC,QAAQ,EAAI,OAAO;IAYvB,OAAO,CAAC,gBAAgB;CAGzB","file":"PropertyMetadata.d.ts","sourcesContent":["import {Enumerable, Storable, Type} from \"@tsed/core\";\nimport {IPropertyOptions} from \"../../converters/interfaces/IPropertyOptions\";\nimport {JsonSchemesRegistry} from \"../registries/JsonSchemesRegistry\";\nimport {JsonSchema} from \"./JsonSchema\";\n\nexport class PropertyMetadata extends Storable implements IPropertyOptions {\n  /**\n   * Allowed value when the entity is required.\n   * @type {Array}\n   */\n  @Enumerable()\n  public allowedRequiredValues: any[] = [];\n\n  @Enumerable()\n  public ignoreProperty: boolean = false;\n\n  @Enumerable()\n  public onSerialize: Function;\n\n  @Enumerable()\n  public onDeserialize: Function;\n\n  constructor(target: any, propertyKey: any) {\n    super(target, propertyKey);\n    this.createJsonSchema();\n  }\n\n  /**\n   *\n   * @returns {Type<any>}\n   */\n  get type(): Type<any> {\n    return this._type;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set type(value: Type<any>) {\n    this._type = value || Object;\n    this.createJsonSchema();\n  }\n\n  /**\n   *\n   * @returns {JsonSchema}\n   */\n  get schema(): JsonSchema {\n    return this.store.get(\"schema\");\n  }\n\n  /**\n   * Return the required state.\n   * @returns {boolean}\n   */\n  get required(): boolean {\n    return JsonSchemesRegistry.required(this.target, this.name || (this.propertyKey as string));\n  }\n\n  /**\n   * Change the state of the required data.\n   * @param value\n   */\n  set required(value: boolean) {\n    JsonSchemesRegistry.required(this.target, this.name || (this.propertyKey as string), value);\n  }\n\n  private createJsonSchema() {\n    this.store.set(\"schema\", JsonSchemesRegistry.property(this.target, this.propertyKey as string, this.type, this.collectionType));\n  }\n}\n"],"sourceRoot":"../../../src"}