{"version":3,"sources":["services/DIConfiguration.ts"],"names":[],"mappings":"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","file":"DIConfiguration.js","sourcesContent":["import {deepClone, deepExtends, getValue, setValue} from \"@tsed/core\";\nimport {IDIConfigurationOptions} from \"../interfaces/IDIConfigurationOptions\";\nimport {ProviderScope} from \"../interfaces/ProviderScope\";\n\nexport class DIConfiguration {\n  protected map: Map<string, any> = new Map();\n\n  [key: string]: any;\n\n  constructor(initialProps = {}) {\n    this.set({\n      scopes: {},\n      ...initialProps\n    });\n\n    return new Proxy(this, {\n      getOwnPropertyDescriptor(target: any, p: PropertyKey): PropertyDescriptor | undefined {\n        return Reflect.getOwnPropertyDescriptor(target, p);\n      },\n\n      has(target: any, p: PropertyKey): boolean {\n        if (Reflect.has(target, p) || typeof p === \"symbol\") {\n          return Reflect.has(target, p);\n        }\n\n        return target.get(p as any) !== undefined;\n      },\n\n      get(target: any, p: PropertyKey, receiver: any): any {\n        if (Reflect.has(target, p) || typeof p === \"symbol\") {\n          return Reflect.get(target, p, receiver);\n        }\n\n        return target.get(p as any);\n      },\n\n      set(target: DIConfiguration, p: PropertyKey, value: any, receiver: any): boolean {\n        if (Reflect.has(target, p) || typeof p === \"symbol\") {\n          return Reflect.set(target, p, value, receiver);\n        }\n\n        return !!target.set(p as any, value);\n      },\n\n      deleteProperty(target: any, p: PropertyKey): boolean {\n        return Reflect.deleteProperty(target, p);\n      },\n\n      defineProperty(target: any, p: PropertyKey, attributes: PropertyDescriptor): boolean {\n        return Reflect.defineProperty(target, p, attributes);\n      },\n\n      ownKeys(target: DIConfiguration): PropertyKey[] {\n        return Reflect.ownKeys(target).concat(Array.from(target.map.keys()));\n      }\n    });\n  }\n\n  get scopes(): {[key: string]: ProviderScope} {\n    return this.map.get(\"scopes\");\n  }\n\n  set scopes(value: {[key: string]: ProviderScope}) {\n    this.map.set(\"scopes\", value);\n  }\n\n  /**\n   *\n   * @param callbackfn\n   * @param thisArg\n   */\n  forEach(callbackfn: (value: any, index: string, map: Map<string, any>) => void, thisArg?: any) {\n    return this.map.forEach(callbackfn, thisArg);\n  }\n\n  /**\n   *\n   * @param propertyKey\n   * @param value\n   */\n  set(propertyKey: string | Partial<IDIConfigurationOptions>, value?: any): this {\n    if (typeof propertyKey === \"string\") {\n      setValue(propertyKey, value, this.map);\n    } else {\n      Object.assign(this, propertyKey);\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @param propertyKey\n   * @returns {undefined|any}\n   */\n  get<T>(propertyKey: string): T {\n    return this.resolve(getValue(propertyKey, this.map));\n  }\n\n  merge(obj: Partial<IDIConfigurationOptions>) {\n    Object.entries(obj).forEach(([key, value]) => {\n      const descriptor = Object.getOwnPropertyDescriptor(DIConfiguration.prototype, key);\n      const originalValue = this.get(key);\n      value = deepExtends(value, originalValue);\n\n      if (descriptor && [\"set\", \"map\", \"get\"].indexOf(key) === -1) {\n        this[key] = value;\n      } else {\n        this.set(key, value);\n      }\n    });\n  }\n\n  /**\n   *\n   * @param value\n   * @returns {any}\n   */\n  resolve(value: any) {\n    if (typeof value === \"object\" && value !== null) {\n      Object.entries(value).forEach(([k, v]) => {\n        value[k] = this.resolve(v);\n      });\n\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      return value.replace(/\\${([\\w.]+)}/gi, (match, key) => getValue(key, this.map));\n    }\n\n    return value;\n  }\n\n  toRawObject(): IDIConfigurationOptions {\n    return Array.from(this.map.entries()).reduce((obj: any, [key, value]) => {\n      obj[key] = deepClone(value);\n\n      return obj;\n    }, {});\n  }\n}\n"],"sourceRoot":"../../src"}