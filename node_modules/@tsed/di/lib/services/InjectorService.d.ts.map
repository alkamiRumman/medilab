{"version":3,"sources":["services/InjectorService.ts"],"names":[],"mappings":"AAGA,OAAO,EAAC,SAAS,EAAC,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAC,eAAe,EAAC,MAAM,0BAA0B,CAAC;AACzD,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAK3C,OAAO,EACL,uBAAuB,EACvB,SAAS,EAET,0BAA0B,EAC1B,wBAAwB,EAGxB,cAAc,EAEd,aAAa,EACb,aAAa,EACd,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAC,eAAe,EAAC,MAAM,mBAAmB,CAAC;AAalD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,qBAIa,eAAgB,SAAQ,SAAS;IACrC,QAAQ,EAAE,uBAAuB,GAAG,eAAe,CAAgC;IACnF,MAAM,EAAE,SAAS,CAAW;IACnC,OAAO,CAAC,qBAAqB,CAAkB;;IAQ/C;;;OAGG;IACI,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC;IAItC;;;;OAIG;IACI,YAAY,CAAC,KAAK,EAAE,aAAa,EAAE,QAAQ,CAAC,EAAE,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;IAYxE;;OAEG;IACI,OAAO,IAAI,GAAG,EAAE;IAIvB;;;;;;;;;;;;;;;;;;OAkBG;IACH,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,GAAG,CAAC,GAAG,SAAS;IAI3C;;;;OAIG;IACH,GAAG,CAAC,KAAK,EAAE,aAAa,GAAG,OAAO;IAIlC;;;;;;;;;;;;;;;;;;;;OAoBG;IACI,MAAM,CAAC,CAAC,EACb,KAAK,EAAE,aAAa,EACpB,MAAM,GAAE,GAAG,CAAC,aAAa,EAAE,GAAG,CAAyB,EACvD,OAAO,GAAE,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAM,GACvC,CAAC;IAwCJ;;OAEG;IACG,SAAS,CAAC,MAAM,GAAE,eAAe,CAAC,GAAG,CAAyB;IAoBpE,QAAQ,CAAC,MAAM,GAAE,eAAe,CAAC,GAAG,CAAyB;IAkB7D;;;;OAIG;IACG,IAAI,CAAC,SAAS,GAAE,GAAG,CAAC,aAAa,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAmB,GAAG,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IAkBzG;;OAEG;IACH,oBAAoB;IAqBpB;;;OAGG;IACI,wBAAwB,CAAC,QAAQ,EAAE,GAAG;IA8B7C;;;;OAIG;IACI,UAAU,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAC,WAAW,EAAC,EAAE,0BAA0B;IAY1E;;;;;OAKG;IACI,YAAY,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAC,WAAW,EAAE,OAAO,EAAC,EAAE,0BAA0B;IAQrF;;;;;OAKG;IACI,SAAS,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAC,WAAW,EAAE,UAAU,EAAE,YAAY,EAAC,EAAE,wBAAwB;IAUjG;;;;;OAKG;IACI,YAAY,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAC,WAAW,EAAE,UAAU,EAAE,YAAY,EAAC,EAAE,wBAAwB;;;;;IAoBpG;;;;;;OAMG;IACI,eAAe,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAC,WAAW,EAAE,OAAO,EAAE,OAAO,EAAC,EAAE,0BAA0B;IA4CjG;;;;;;;;;;;;;;;;OAgBG;IACH,OAAO,CAAC,OAAO;IAoDf;;;;OAIG;IACH,OAAO,CAAC,gBAAgB;CAuCzB","file":"InjectorService.d.ts","sourcesContent":["import {deepClone, getClass, getClassOrSymbol, isFunction, isInheritedFrom, Metadata, nameOf, prototypeOf, Store} from \"@tsed/core\";\n\nimport * as util from \"util\";\nimport {Container} from \"../class/Container\";\nimport {LocalsContainer} from \"../class/LocalsContainer\";\nimport {Provider} from \"../class/Provider\";\nimport {Configuration} from \"../decorators/configuration\";\nimport {Injectable} from \"../decorators/injectable\";\nimport {InjectionError} from \"../errors/InjectionError\";\nimport {UndefinedTokenError} from \"../errors/UndefinedTokenError\";\nimport {\n  IDIConfigurationOptions,\n  IDILogger,\n  IInjectableProperties,\n  IInjectablePropertyService,\n  IInjectablePropertyValue,\n  IInterceptor,\n  IInterceptorContext,\n  IInvokeOptions,\n  InjectablePropertyType,\n  ProviderScope,\n  TokenProvider\n} from \"../interfaces\";\nimport {GlobalProviders} from \"../registries/GlobalProviders\";\nimport {DIConfiguration} from \"./DIConfiguration\";\n\ninterface IInvokeSettings {\n  token: TokenProvider;\n  parent?: TokenProvider;\n  scope: ProviderScope;\n  isBindable: boolean;\n  deps: any[];\n  imports: any[];\n\n  construct(deps: TokenProvider[]): any;\n}\n\n/**\n * This service contain all services collected by `@Service` or services declared manually with `InjectorService.factory()` or `InjectorService.service()`.\n *\n * ### Example:\n *\n * ```typescript\n * import {InjectorService} from \"@tsed/common\";\n *\n * // Import the services (all services are decorated with @Service()\";\n * import MyService1 from \"./services/service1\";\n * import MyService2 from \"./services/service2\";\n * import MyService3 from \"./services/service3\";\n *\n * // When all services is imported you can load InjectorService.\n * const injector = new InjectorService()\n *\n * await injector.load();\n *\n * const myService1 = injector.get<MyService1>(MyServcice1);\n * ```\n *\n * > Note: `ServerLoader` make this automatically when you use `ServerLoader.mount()` method (or settings attributes) and load services and controllers during the starting server.\n *\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON,\n  global: true\n})\nexport class InjectorService extends Container {\n  public settings: IDIConfigurationOptions & DIConfiguration = new DIConfiguration() as any;\n  public logger: IDILogger = console;\n  private resolvedConfiguration: boolean = false;\n\n  constructor() {\n    super();\n    const provider = this.addProvider(InjectorService).getProvider(InjectorService)!;\n    provider.instance = this;\n  }\n\n  /**\n   * Retrieve default scope for a given provider.\n   * @param provider\n   */\n  public scopeOf(provider: Provider<any>) {\n    return provider.scope || this.settings.scopes[provider.type] || ProviderScope.SINGLETON;\n  }\n\n  /**\n   * Clone a provider from GlobalProviders and the given token. forkProvider method build automatically the provider if the instance parameter ins't given.\n   * @param token\n   * @param instance\n   */\n  public forkProvider(token: TokenProvider, instance?: any): Provider<any> {\n    const provider = this.addProvider(token).getProvider(token)!;\n\n    if (!instance) {\n      instance = this.invoke(token);\n    }\n\n    provider.instance = instance;\n\n    return provider;\n  }\n\n  /**\n   * Return a list of instance build by the injector.\n   */\n  public toArray(): any[] {\n    return super.toArray().map(provider => provider.instance);\n  }\n\n  /**\n   * Get a service or factory already constructed from his symbol or class.\n   *\n   * #### Example\n   *\n   * ```typescript\n   * import {InjectorService} from \"@tsed/common\";\n   * import MyService from \"./services\";\n   *\n   * class OtherService {\n   *      constructor(injectorService: InjectorService) {\n   *          const myService = injectorService.get<MyService>(MyService);\n   *      }\n   * }\n   * ```\n   *\n   * @param token The class or symbol registered in InjectorService.\n   * @returns {boolean}\n   */\n  get<T>(token: TokenProvider): T | undefined {\n    return (super.has(token) && super.get(getClassOrSymbol(token))!.instance) || undefined;\n  }\n\n  /**\n   * The has() method returns a boolean indicating whether an element with the specified key exists or not.\n   * @returns {boolean}\n   * @param token\n   */\n  has(token: TokenProvider): boolean {\n    return super.has(getClassOrSymbol(token)) && !!this.get(token);\n  }\n\n  /**\n   * Invoke the class and inject all services that required by the class constructor.\n   *\n   * #### Example\n   *\n   * ```typescript\n   * import {InjectorService} from \"@tsed/common\";\n   * import MyService from \"./services\";\n   *\n   * class OtherService {\n   *     constructor(injectorService: InjectorService) {\n   *          const myService = injectorService.invoke<MyService>(MyService);\n   *      }\n   *  }\n   * ```\n   *\n   * @param token The injectable class to invoke. Class parameters are injected according constructor signature.\n   * @param locals  Optional object. If preset then any argument Class are read from this object first, before the `InjectorService` is consulted.\n   * @param options\n   * @returns {T} The class constructed.\n   */\n  public invoke<T>(\n    token: TokenProvider,\n    locals: Map<TokenProvider, any> = new LocalsContainer(),\n    options: Partial<IInvokeOptions<T>> = {}\n  ): T {\n    const provider = this.getProvider(token);\n    let instance: any;\n\n    locals.set(Configuration, this.settings);\n\n    if (locals.has(token)) {\n      instance = locals.get(token);\n    } else if (!provider || options.rebuild) {\n      instance = this.resolve(token, locals, options);\n    } else {\n      switch (this.scopeOf(provider)) {\n        case ProviderScope.SINGLETON:\n          if (!this.has(token)) {\n            provider.instance = this.resolve(token, locals, options);\n\n            if (provider.isAsync()) {\n              provider.instance.then((instance: any) => {\n                provider.instance = instance;\n              });\n            }\n          }\n\n          instance = this.get<T>(token)!;\n          break;\n\n        case ProviderScope.REQUEST:\n          instance = this.resolve(token, locals, options);\n          locals.set(token, instance);\n          break;\n\n        case ProviderScope.INSTANCE:\n          instance = this.resolve(provider.provide, locals, options);\n          break;\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   * Build only providers which are asynchronous.\n   */\n  async loadAsync(locals: LocalsContainer<any> = new LocalsContainer()) {\n    const providers = super.toArray();\n\n    for (const provider of providers) {\n      if (!provider.root) {\n        if (!locals.has(provider.token)) {\n          if (provider.isAsync()) {\n            await this.invoke(provider.token, locals);\n          }\n\n          if (provider.instance) {\n            locals.set(provider.token, provider.instance);\n          }\n        }\n      }\n    }\n\n    return locals;\n  }\n\n  loadSync(locals: LocalsContainer<any> = new LocalsContainer()) {\n    const providers = super.toArray();\n\n    for (const provider of providers) {\n      if (!provider.root) {\n        if (!locals.has(provider.token) && this.scopeOf(provider) === ProviderScope.SINGLETON) {\n          this.invoke(provider.token, locals);\n        }\n\n        if (provider.instance) {\n          locals.set(provider.token, provider.instance);\n        }\n      }\n    }\n\n    return locals;\n  }\n\n  /**\n   * Build all providers from given container (or GlobalProviders) and emit `$onInit` event.\n   *\n   * @param container\n   */\n  async load(container: Map<TokenProvider, Provider<any>> = GlobalProviders): Promise<LocalsContainer<any>> {\n    // Clone all providers in the container\n    this.addProviders(container);\n\n    // Resolve configuration from providers\n    this.resolveConfiguration();\n\n    // build async and sync provider\n    let locals = await this.loadAsync();\n\n    // load sync provider\n    locals = this.loadSync(locals);\n\n    await locals.emit(\"$onInit\");\n\n    return locals;\n  }\n\n  /**\n   * Load all configurations registered on providers\n   */\n  resolveConfiguration() {\n    if (this.resolvedConfiguration) {\n      return;\n    }\n\n    const rawSettings = this.settings.toRawObject();\n\n    // @ts-ignore\n    this.settings.map.clear();\n\n    super.forEach(provider => {\n      if (provider.configuration) {\n        this.settings.merge(provider.configuration);\n      }\n    });\n\n    this.settings.merge(rawSettings);\n\n    this.resolvedConfiguration = true;\n  }\n\n  /**\n   *\n   * @param instance\n   */\n  public bindInjectableProperties(instance: any) {\n    const store = Store.from(getClass(instance));\n\n    if (store && store.has(\"injectableProperties\")) {\n      const properties: IInjectableProperties = store.get(\"injectableProperties\") || [];\n\n      Object.keys(properties)\n        .map(key => properties[key])\n        .forEach(definition => {\n          switch (definition.bindingType) {\n            case InjectablePropertyType.METHOD:\n              this.bindMethod(instance, definition);\n              break;\n            case InjectablePropertyType.PROPERTY:\n              this.bindProperty(instance, definition);\n              break;\n            case InjectablePropertyType.CONSTANT:\n              this.bindConstant(instance, definition);\n              break;\n            case InjectablePropertyType.VALUE:\n              this.bindValue(instance, definition);\n              break;\n            case InjectablePropertyType.INTERCEPTOR:\n              this.bindInterceptor(instance, definition);\n              break;\n          }\n        });\n    }\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} propertyKey\n   */\n  public bindMethod(instance: any, {propertyKey}: IInjectablePropertyService) {\n    const target = getClass(instance);\n    const originalMethod = instance[propertyKey];\n    const deps = Metadata.getParamTypes(prototypeOf(target), propertyKey);\n\n    instance[propertyKey] = () => {\n      const services = deps.map((dependency: any) => this.get(dependency));\n\n      return originalMethod.call(instance, ...services);\n    };\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} propertyKey\n   * @param {any} useType\n   */\n  public bindProperty(instance: any, {propertyKey, useType}: IInjectablePropertyService) {\n    Object.defineProperty(instance, propertyKey, {\n      get: () => {\n        return this.get(useType);\n      }\n    });\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} propertyKey\n   * @param {any} useType\n   */\n  public bindValue(instance: any, {propertyKey, expression, defaultValue}: IInjectablePropertyValue) {\n    const descriptor = {\n      get: () => this.settings.get(expression) || defaultValue,\n      set: (value: any) => this.settings.set(expression, value),\n      enumerable: true,\n      configurable: true\n    };\n    Object.defineProperty(instance, propertyKey, descriptor);\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} propertyKey\n   * @param {any} useType\n   */\n  public bindConstant(instance: any, {propertyKey, expression, defaultValue}: IInjectablePropertyValue) {\n    const clone = (o: any) => {\n      if (o) {\n        return Object.freeze(deepClone(o));\n      }\n\n      return defaultValue;\n    };\n\n    const descriptor = {\n      get: () => clone(this.settings.get(expression)),\n\n      enumerable: true,\n      configurable: true\n    };\n    Object.defineProperty(instance, propertyKey, descriptor);\n\n    return descriptor;\n  }\n\n  /**\n   *\n   * @param instance\n   * @param propertyKey\n   * @param useType\n   * @param options\n   */\n  public bindInterceptor(instance: any, {propertyKey, useType, options}: IInjectablePropertyService) {\n    const target = getClass(instance);\n    const originalMethod = instance[propertyKey];\n\n    instance[propertyKey] = (...args: any[]) => {\n      const next = (err?: Error) => {\n        if (!err) {\n          return originalMethod.apply(instance, args);\n        }\n\n        throw err;\n      };\n\n      const context: IInterceptorContext<any> = {\n        target,\n        method: propertyKey,\n        propertyKey,\n        args,\n        options,\n        proceed: util.deprecate(next, \"context.proceed() is deprecated. Use context.next() or next() parameters instead.\"),\n        next\n      };\n\n      const interceptor = this.get<IInterceptor>(useType)!;\n\n      if (interceptor.aroundInvoke) {\n        interceptor.aroundInvoke = util.deprecate(\n          interceptor.aroundInvoke.bind(interceptor),\n          \"interceptor.aroundInvoke is deprecated. Use interceptor.intercept instead.\"\n        );\n\n        return interceptor.aroundInvoke!(context, options);\n      }\n\n      return interceptor.intercept!(\n        {\n          ...context,\n          options\n        },\n        next\n      );\n    };\n  }\n\n  /**\n   * Invoke a class method and inject service.\n   *\n   * #### IInjectableMethod options\n   *\n   * * **target**: Optional. The class instance.\n   * * **methodName**: `string` Optional. The method name.\n   * * **designParamTypes**: `any[]` Optional. List of injectable types.\n   * * **locals**: `Map<Function, any>` Optional. If preset then any argument Class are read from this object first, before the `InjectorService` is consulted.\n   *\n   * #### Example\n   *\n   * @param target\n   * @param locals\n   * @param options\n   * @private\n   */\n  private resolve<T>(target: TokenProvider, locals: Map<TokenProvider, any>, options: Partial<IInvokeOptions<T>> = {}): Promise<T> {\n    const {token, deps, construct, isBindable, imports} = this.mapInvokeOptions(target, options);\n    const provider = this.getProvider(target);\n\n    if (provider) {\n      if (!provider.injectable && options.parent) {\n        throw new InjectionError(token, `${nameOf(token)} ${provider.type} is not injectable to another provider`);\n      }\n\n      const {onInvoke} = GlobalProviders.getRegistrySettings(target);\n      if (onInvoke) {\n        onInvoke(provider, locals, deps);\n      }\n    }\n\n    let instance: any;\n    let currentDependency: any = false;\n\n    try {\n      const invokeDependency = (parent?: any) => (token: any, index: number): any => {\n        currentDependency = {token, index, deps};\n\n        return isInheritedFrom(token, Provider, 1) ? provider : this.invoke(token, locals, {parent});\n      };\n\n      // Invoke manually imported providers\n      imports.forEach(invokeDependency());\n\n      // Inject dependencies\n      const services = deps.map(invokeDependency(token));\n\n      currentDependency = false;\n\n      instance = construct(services);\n    } catch (error) {\n      InjectionError.throwInjectorError(token, currentDependency, error);\n    }\n\n    if (instance === undefined) {\n      throw new InjectionError(\n        token,\n        `Unable to create new instance from undefined value. Check your provider declaration for ${nameOf(token)}`\n      );\n    }\n\n    if (instance && isBindable) {\n      this.bindInjectableProperties(instance);\n    }\n\n    return instance;\n  }\n\n  /**\n   * Create options to invoke a provider or class.\n   * @param token\n   * @param options\n   */\n  private mapInvokeOptions(token: TokenProvider, options: Partial<IInvokeOptions<any>>): IInvokeSettings {\n    let imports: TokenProvider[] | undefined = options.imports;\n    let deps: TokenProvider[] | undefined = options.deps;\n    let scope = options.scope;\n    let construct;\n    let isBindable = false;\n\n    if (!token) {\n      throw new UndefinedTokenError();\n    }\n\n    const provider = this.hasProvider(token) ? this.getProvider(token)! : new Provider(token);\n\n    scope = scope || this.scopeOf(provider);\n    deps = deps || provider.deps;\n    imports = imports || provider.imports;\n\n    if (provider.useValue) {\n      construct = () => (isFunction(provider.useValue) ? provider.useValue() : provider.useValue);\n    } else if (provider.useFactory) {\n      construct = (deps: TokenProvider[]) => provider.useFactory(...deps);\n    } else if (provider.useAsyncFactory) {\n      construct = (deps: TokenProvider[]) => provider.useAsyncFactory(...deps);\n    } else {\n      // useClass\n      isBindable = true;\n      deps = deps || Metadata.getParamTypes(provider.useClass);\n      construct = (deps: TokenProvider[]) => new provider.useClass(...deps);\n    }\n\n    return {\n      token,\n      scope: scope || Store.from(token).get(\"scope\") || ProviderScope.SINGLETON,\n      deps: deps! || [],\n      imports: imports || [],\n      isBindable,\n      construct\n    };\n  }\n}\n"],"sourceRoot":"../../src"}