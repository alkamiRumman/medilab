{"version":3,"sources":["errors/InjectionError.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAE5C,qBAAa,cAAe,SAAQ,KAAK;IACvC,IAAI,SAAqB;IAElB,MAAM,EAAE,aAAa,EAAE,CAAM;IAC7B,MAAM,EAAE,GAAG,CAAC;gBAEP,KAAK,EAAE,aAAa,EAAE,MAAM,CAAC,EAAE,GAAG;IA2B9C,MAAM,CAAC,kBAAkB,CAAC,KAAK,EAAE,GAAG,EAAE,iBAAiB,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG;CAOzE","file":"InjectionError.d.ts","sourcesContent":["import {getConstructorArgNames, isClass, isString, nameOf} from \"@tsed/core\";\nimport {colorize} from \"ts-log-debug/lib/layouts/utils/colorizeUtils\";\nimport {TokenProvider} from \"../interfaces\";\n\nexport class InjectionError extends Error {\n  name = \"INJECTION_ERROR\";\n\n  public tokens: TokenProvider[] = [];\n  public origin: any;\n\n  constructor(token: TokenProvider, origin?: any) {\n    super(isString(origin) ? origin : \"\");\n\n    this.tokens = [token];\n\n    if (origin) {\n      if (isString(origin)) {\n        this.origin = {\n          message: origin,\n          stack: this.stack\n        };\n      } else {\n        if (origin.tokens) {\n          this.tokens = this.tokens.concat(origin.tokens);\n          this.origin = origin.origin;\n        } else {\n          this.origin = origin;\n        }\n      }\n    }\n\n    const originMessage = this.origin ? \"\\nOrigin: \" + this.origin.message : \"\";\n    const tokensMessage = this.tokens.map(token => nameOf(token)).join(\" > \");\n\n    this.message = `Injection failed on ${tokensMessage}${originMessage}`;\n  }\n\n  static throwInjectorError(token: any, currentDependency: any, error: any) {\n    if (currentDependency && isClass(token)) {\n      error.message = printDependencyInjectionError(token, {...currentDependency, message: error.message});\n    }\n\n    throw new InjectionError(token, error);\n  }\n}\n\nfunction printDependencyInjectionError(token: any, options: {token: any; index: number; deps: any[]; message: string}) {\n  let erroredArg = \"\";\n\n  const args = getConstructorArgNames(token)\n    .map((arg, index) => {\n      if (options.index === index) {\n        erroredArg = arg;\n        arg = colorize(arg, \"red\");\n      }\n\n      return `${arg}: ${nameOf(options.deps[index])}`;\n    })\n    .join(\", \");\n\n  const signature = nameOf(token) + \"->constructor(\" + args + \")\";\n  const indexOf = signature.indexOf(erroredArg) - 5;\n  const drawline = (indexOf: number) => \" \".repeat(indexOf) + colorize(\"^\" + \"â€¾\".repeat(erroredArg.length - 1), \"red\");\n\n  return \"Unable to inject dependency. \" + options.message + \"\\n\\n\" + signature + \"\\n\" + (indexOf > -1 ? drawline(indexOf) : \"\");\n}\n"],"sourceRoot":"../../src"}