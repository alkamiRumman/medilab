import { Type } from "../interfaces";
/**
 * EntityDescription store all information collected by a decorator (class, property key and in option the index of the parameters).
 */
export declare abstract class EntityDescription {
    protected _target: Type<any>;
    /**
     * Custom name.
     */
    name: string;
    /**
     * Index of the entity. Only used when the entity describe a parameters.
     */
    readonly index: number;
    /**
     *
     */
    readonly propertyKey: string | symbol;
    /**
     * Type of the collection (Array, Map, Set, etc...)
     */
    collectionType: Type<any>;
    /**
     * Required entity.
     */
    required: boolean;
    /**
     * Allowed value when the entity is required.
     * @type {Array}
     */
    allowedRequiredValues: any[];
    /**
     * Type of the entity.
     */
    protected _type: Type<any>;
    constructor(_target: Type<any>, propertyKey: string | symbol, index?: number | PropertyDescriptor);
    /**
     * Class of the entity.
     * @returns {Type<any>}
     */
    /**
    *
    * @param {Type<any>} target
    */
    target: Type<any>;
    /**
     * Return the class name of the entity.
     * @returns {string}
     */
    readonly targetName: string;
    /**
     *
     * @returns {Type<any>}
     */
    /**
    *
    * @param value
    */
    type: Type<any>;
    /**
     *
     * @returns {string}
     */
    readonly typeName: string;
    /**
     *
     * @returns {string}
     */
    readonly collectionName: string;
    /**
     *
     * @returns {boolean}
     */
    readonly isCollection: boolean;
    /**
     *
     * @returns {boolean}
     */
    readonly isArray: boolean;
    /**
     *
     * @returns {boolean}
     */
    readonly isPrimitive: boolean;
    /**
     *
     * @returns {boolean}
     */
    readonly isDate: boolean;
    /**
     *
     * @returns {boolean}
     */
    readonly isObject: boolean;
    /**
     *
     * @returns {boolean}
     */
    readonly isClass: boolean;
    /**
     * Check precondition between value, required and allowedRequiredValues to know if the entity is required.
     * @param value
     * @returns {boolean}
     */
    isRequired(value: any): boolean;
}
