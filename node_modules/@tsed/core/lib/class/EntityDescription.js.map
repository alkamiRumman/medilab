{"version":3,"sources":["class/EntityDescription.ts"],"names":[],"mappings":"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","file":"EntityDescription.js","sourcesContent":["import {Enumerable, NotEnumerable} from \"../decorators\";\nimport {Type} from \"../interfaces\";\nimport {getClass, isArrayOrArrayClass, isClass, isCollection, isDate, isObject, isPrimitiveOrPrimitiveClass, nameOf} from \"../utils\";\nimport {Metadata} from \"./Metadata\";\n\n/**\n * EntityDescription store all information collected by a decorator (class, property key and in option the index of the parameters).\n */\nexport abstract class EntityDescription {\n  /**\n   * Custom name.\n   */\n  @Enumerable()\n  public name: string;\n  /**\n   * Index of the entity. Only used when the entity describe a parameters.\n   */\n  @NotEnumerable()\n  public readonly index: number;\n  /**\n   *\n   */\n  @Enumerable()\n  public readonly propertyKey: string | symbol;\n  /**\n   * Type of the collection (Array, Map, Set, etc...)\n   */\n  @Enumerable()\n  public collectionType: Type<any>;\n  /**\n   * Required entity.\n   */\n  @Enumerable()\n  public required: boolean = false;\n\n  /**\n   * Allowed value when the entity is required.\n   * @type {Array}\n   */\n  @Enumerable()\n  public allowedRequiredValues: any[] = [];\n\n  /**\n   * Type of the entity.\n   */\n  @NotEnumerable()\n  protected _type: Type<any>;\n\n  constructor(protected _target: Type<any>, propertyKey: string | symbol, index?: number | PropertyDescriptor) {\n    if (typeof index === \"number\") {\n      this.index = index;\n    }\n\n    this.propertyKey = propertyKey;\n    this.target = _target;\n  }\n\n  /**\n   * Class of the entity.\n   * @returns {Type<any>}\n   */\n  get target(): Type<any> {\n    return getClass(this._target);\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   */\n  set target(target: Type<any>) {\n    this._target = target;\n    let type;\n\n    if (typeof this.index === \"number\") {\n      type = Metadata.getParamTypes(this._target, this.propertyKey)[this.index];\n    } else {\n      type = Metadata.getType(this._target, this.propertyKey);\n    }\n\n    if (isCollection(type)) {\n      this.collectionType = type;\n      this._type = Object;\n    } else {\n      this._type = type;\n    }\n\n    this.name = nameOf(this.propertyKey);\n  }\n\n  /**\n   * Return the class name of the entity.\n   * @returns {string}\n   */\n  get targetName(): string {\n    return nameOf(this.target);\n  }\n\n  /**\n   *\n   * @returns {Type<any>}\n   */\n  get type(): Type<any> {\n    return this._type;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set type(value: Type<any>) {\n    this._type = value || Object;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get typeName(): string {\n    return nameOf(this._type);\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get collectionName(): string {\n    return this.collectionType ? nameOf(this.collectionType) : \"\";\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isCollection(): boolean {\n    return !!this.collectionType;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isArray() {\n    return isArrayOrArrayClass(this.collectionType);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isPrimitive() {\n    return isPrimitiveOrPrimitiveClass(this._type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isDate() {\n    return isDate(this._type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isObject() {\n    return isObject(this.type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isClass() {\n    return isClass(this.type);\n  }\n\n  /**\n   * Check precondition between value, required and allowedRequiredValues to know if the entity is required.\n   * @param value\n   * @returns {boolean}\n   */\n  isRequired(value: any): boolean {\n    return this.required && [undefined, null, \"\"].indexOf(value) > -1 && this.allowedRequiredValues.indexOf(value) === -1;\n  }\n}\n"],"sourceRoot":"../../src"}