{"version":3,"sources":["class/EntityDescription.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,IAAI,EAAC,MAAM,eAAe,CAAC;AAInC;;GAEG;AACH,8BAAsB,iBAAiB;IAwCzB,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC;IAvCxC;;OAEG;IAEI,IAAI,EAAE,MAAM,CAAC;IACpB;;OAEG;IACH,SACgB,KAAK,EAAE,MAAM,CAAC;IAC9B;;OAEG;IACH,SACgB,WAAW,EAAE,MAAM,GAAG,MAAM,CAAC;IAC7C;;OAEG;IAEI,cAAc,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACjC;;OAEG;IAEI,QAAQ,EAAE,OAAO,CAAS;IAEjC;;;OAGG;IAEI,qBAAqB,EAAE,GAAG,EAAE,CAAM;IAEzC;;OAEG;IAEH,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBAEL,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,MAAM,GAAG,MAAM,EAAE,KAAK,CAAC,EAAE,MAAM,GAAG,kBAAkB;IAS3G;;;OAGG;;;;;IACC,MAAM,EAAI,IAAI,CAAC,GAAG,CAAC;IA4BvB;;;OAGG;aACC,UAAU,EAAI,MAAM;IAIxB;;;OAGG;;;;;IACC,IAAI,EAAI,IAAI,CAAC,GAAG,CAAC;IAYrB;;;OAGG;aACC,QAAQ,EAAI,MAAM;IAItB;;;OAGG;aACC,cAAc,EAAI,MAAM;IAI5B;;;OAGG;aACC,YAAY,EAAI,OAAO;IAI3B;;;OAGG;aACC,OAAO;IAIX;;;OAGG;aACC,WAAW;IAIf;;;OAGG;aACC,MAAM;IAIV;;;OAGG;aACC,QAAQ;IAIZ;;;OAGG;aACC,OAAO;IAIX;;;;OAIG;IACH,UAAU,CAAC,KAAK,EAAE,GAAG,GAAG,OAAO;CAGhC","file":"EntityDescription.d.ts","sourcesContent":["import {Enumerable, NotEnumerable} from \"../decorators\";\nimport {Type} from \"../interfaces\";\nimport {getClass, isArrayOrArrayClass, isClass, isCollection, isDate, isObject, isPrimitiveOrPrimitiveClass, nameOf} from \"../utils\";\nimport {Metadata} from \"./Metadata\";\n\n/**\n * EntityDescription store all information collected by a decorator (class, property key and in option the index of the parameters).\n */\nexport abstract class EntityDescription {\n  /**\n   * Custom name.\n   */\n  @Enumerable()\n  public name: string;\n  /**\n   * Index of the entity. Only used when the entity describe a parameters.\n   */\n  @NotEnumerable()\n  public readonly index: number;\n  /**\n   *\n   */\n  @Enumerable()\n  public readonly propertyKey: string | symbol;\n  /**\n   * Type of the collection (Array, Map, Set, etc...)\n   */\n  @Enumerable()\n  public collectionType: Type<any>;\n  /**\n   * Required entity.\n   */\n  @Enumerable()\n  public required: boolean = false;\n\n  /**\n   * Allowed value when the entity is required.\n   * @type {Array}\n   */\n  @Enumerable()\n  public allowedRequiredValues: any[] = [];\n\n  /**\n   * Type of the entity.\n   */\n  @NotEnumerable()\n  protected _type: Type<any>;\n\n  constructor(protected _target: Type<any>, propertyKey: string | symbol, index?: number | PropertyDescriptor) {\n    if (typeof index === \"number\") {\n      this.index = index;\n    }\n\n    this.propertyKey = propertyKey;\n    this.target = _target;\n  }\n\n  /**\n   * Class of the entity.\n   * @returns {Type<any>}\n   */\n  get target(): Type<any> {\n    return getClass(this._target);\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   */\n  set target(target: Type<any>) {\n    this._target = target;\n    let type;\n\n    if (typeof this.index === \"number\") {\n      type = Metadata.getParamTypes(this._target, this.propertyKey)[this.index];\n    } else {\n      type = Metadata.getType(this._target, this.propertyKey);\n    }\n\n    if (isCollection(type)) {\n      this.collectionType = type;\n      this._type = Object;\n    } else {\n      this._type = type;\n    }\n\n    this.name = nameOf(this.propertyKey);\n  }\n\n  /**\n   * Return the class name of the entity.\n   * @returns {string}\n   */\n  get targetName(): string {\n    return nameOf(this.target);\n  }\n\n  /**\n   *\n   * @returns {Type<any>}\n   */\n  get type(): Type<any> {\n    return this._type;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set type(value: Type<any>) {\n    this._type = value || Object;\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get typeName(): string {\n    return nameOf(this._type);\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get collectionName(): string {\n    return this.collectionType ? nameOf(this.collectionType) : \"\";\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isCollection(): boolean {\n    return !!this.collectionType;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isArray() {\n    return isArrayOrArrayClass(this.collectionType);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isPrimitive() {\n    return isPrimitiveOrPrimitiveClass(this._type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isDate() {\n    return isDate(this._type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isObject() {\n    return isObject(this.type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isClass() {\n    return isClass(this.type);\n  }\n\n  /**\n   * Check precondition between value, required and allowedRequiredValues to know if the entity is required.\n   * @param value\n   * @returns {boolean}\n   */\n  isRequired(value: any): boolean {\n    return this.required && [undefined, null, \"\"].indexOf(value) > -1 && this.allowedRequiredValues.indexOf(value) === -1;\n  }\n}\n"],"sourceRoot":"../../src"}